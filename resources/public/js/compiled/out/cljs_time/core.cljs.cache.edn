;; Analyzed by ClojureScript 0.0-3269
{:use-macros nil, :excludes #{= second extend}, :name cljs-time.core, :imports nil, :requires {internal cljs-time.internal.core, cljs-time.internal.core cljs-time.internal.core, string clojure.string, clojure.string clojure.string, goog.date.Date goog.date.Date, goog.date.DateTime goog.date.DateTime, goog.date.UtcDateTime goog.date.UtcDateTime, goog.i18n.TimeZone goog.i18n.TimeZone}, :uses {leap-year? cljs-time.internal.core, format cljs-time.internal.core}, :defs {interval {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 119, :column 7, :end-line 119, :end-column 15, :arglists (quote ([start end])), :doc "Returns an Interval representing the span between the two given DateTime.\n  Note that intervals are closed on the left and open on the right."}, :name cljs-time.core/interval, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 15, :method-params ([start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start end])), :doc "Returns an Interval representing the span between the two given DateTime.\n  Note that intervals are closed on the left and open on the right."}, in-months {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 114, :column 4, :end-line 114, :end-column 13, :protocol cljs-time.core/InTimeUnitProtocol, :doc "Return the time in months", :arglists (quote ([this]))}, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-months, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the time in months"}, period {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 128, :column 7, :end-line 128, :end-column 13, :arglists (quote ([period value] [p1 v1 & kvs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([period value]), :arglists ([period value] [p1 v1 & kvs]), :arglists-meta (nil nil)}}, :name cljs-time.core/period, :variadic true, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([period value]), :arglists ([period value] [p1 v1 & kvs]), :arglists-meta (nil nil)}, :method-params ([period value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists ([period value] [p1 v1 & kvs])}, ago {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 466, :column 7, :end-line 466, :end-column 10, :arglists (quote ([period])), :doc "Returns a DateTime a supplied period before the present.\n\n  e.g. `(-> 5 years ago)`"}, :name cljs-time.core/ago, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 10, :method-params ([period]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 466, :end-line 466, :max-fixed-arity 1, :fn-var true, :arglists (quote ([period])), :doc "Returns a DateTime a supplied period before the present.\n\n  e.g. `(-> 5 years ago)`"}, minutes {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 432, :column 7, :end-line 432, :end-column 14, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many minutes.\n  Without an argument, returns a Period representing only minutes.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :name cljs-time.core/minutes, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 432, :end-line 432, :max-fixed-arity 1, :fn-var true, :arglists ([] [n]), :doc "Given a number, returns a Period representing that many minutes.\n  Without an argument, returns a Period representing only minutes."}, from-default-time-zone {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 383, :column 7, :end-line 383, :end-column 29, :arglists (quote ([dt])), :doc "Assuming `dt` is in the UTC timezone, returns a DateTime\n  corresponding to the same point in calendar time as the given\n  DateTime, but for a correspondingly different absolute instant in\n  time in the default (local) timezone.\n\n  Note: This implementation uses the ECMAScript 5.1 implementation which\n  trades some historical daylight savings transition accuracy for simplicity.\n  see http://es5.github.io/#x15.9.1.8\n  "}, :name cljs-time.core/from-default-time-zone, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 29, :method-params ([dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 383, :end-line 383, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dt])), :doc "Assuming `dt` is in the UTC timezone, returns a DateTime\n  corresponding to the same point in calendar time as the given\n  DateTime, but for a correspondingly different absolute instant in\n  time in the default (local) timezone.\n\n  Note: This implementation uses the ECMAScript 5.1 implementation which\n  trades some historical daylight savings transition accuracy for simplicity.\n  see http://es5.github.io/#x15.9.1.8\n  "}, date? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 633, :column 7, :end-line 633, :end-column 12, :arglists (quote ([x]))}, :name cljs-time.core/date?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 633, :end-line 633, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, end {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 503, :column 7, :end-line 503, :end-column 10, :arglists (quote ([in])), :doc "Returns the end DateTime of an Interval."}, :name cljs-time.core/end, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 10, :method-params ([in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 503, :end-line 503, :max-fixed-arity 1, :fn-var true, :arglists (quote ([in])), :doc "Returns the end DateTime of an Interval."}, interval? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 636, :column 7, :end-line 636, :end-column 16, :arglists (quote ([x]))}, :name cljs-time.core/interval?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 636, :end-line 636, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, in-weeks {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 113, :column 4, :end-line 113, :end-column 12, :protocol cljs-time.core/InTimeUnitProtocol, :doc "Return the time in weeks", :arglists (quote ([this]))}, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-weeks, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the time in weeks"}, to-default-time-zone {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 375, :column 7, :end-line 375, :end-column 27, :arglists (quote ([dt])), :doc "Assuming `dt` is in the UTC timezone, returns a DateTime\n  corresponding to the same absolute instant in time as the given\n  DateTime, but with calendar fields corresponding to in the default\n  (local) timezone."}, :name cljs-time.core/to-default-time-zone, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 27, :method-params ([dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 375, :end-line 375, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dt])), :doc "Assuming `dt` is in the UTC timezone, returns a DateTime\n  corresponding to the same absolute instant in time as the given\n  DateTime, but with calendar fields corresponding to in the default\n  (local) timezone."}, last-day-of-the-month {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 684, :column 7, :end-line 684, :end-column 28, :arglists (quote ([dt] [year month])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dt] [year month]), :arglists ([dt] [year month]), :arglists-meta (nil nil)}}, :name cljs-time.core/last-day-of-the-month, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dt] [year month]), :arglists ([dt] [year month]), :arglists-meta (nil nil)}, :method-params ([dt] [year month]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 684, :end-line 684, :max-fixed-arity 2, :fn-var true, :arglists ([dt] [year month])}, map->Interval {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 117, :column 12, :end-line 117, :end-column 20, :internal-ctor true, :factory :map, :arglists (quote ([G__19596]))}, :name cljs-time.core/map->Interval, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 20, :method-params ([G__19596]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19596]))}, total-days-in-whole-months {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 517, :column 8, :end-line 517, :end-column 34, :private true, :arglists (quote ([interval]))}, :private true, :name cljs-time.core/total-days-in-whole-months, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 34, :method-params ([interval]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 517, :end-line 517, :max-fixed-arity 1, :fn-var true, :arglists (quote ([interval]))}, = {:name cljs-time.core/=, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :line 77, :column 1, :end-line 86, :end-column 4, :doc "**Note:** Equality in goog.date.* (and also with plain\njavascript dates) is not the same as in Joda/clj-time. Two date\nobjects representing the same instant in time in goog.date.* are not\nequal.\n\nIf you need to test for equality use either `cljs-time.core/=`, or\noptionally you can require the `cljs-time.extend` namespace which will\nextend the goog.date.* datatypes, so that clojure.core/= works as\nexpected.", :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 86, :column 3, :end-line 86, :end-column 4, :doc "**Note:** Equality in goog.date.* (and also with plain\njavascript dates) is not the same as in Joda/clj-time. Two date\nobjects representing the same instant in time in goog.date.* are not\nequal.\n\nIf you need to test for equality use either `cljs-time.core/=`, or\noptionally you can require the `cljs-time.extend` namespace which will\nextend the goog.date.* datatypes, so that clojure.core/= works as\nexpected."}}, millis {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 444, :column 7, :end-line 444, :end-column 13, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many milliseconds.\n  Without an argument, returns a Period representing only milliseconds.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :name cljs-time.core/millis, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 444, :end-line 444, :max-fixed-arity 1, :fn-var true, :arglists ([] [n]), :doc "Given a number, returns a Period representing that many milliseconds.\n  Without an argument, returns a Period representing only milliseconds."}, weeks {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 414, :column 7, :end-line 414, :end-column 12, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many weeks.\n  Without an argument, returns a Period representing only weeks.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :name cljs-time.core/weeks, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 414, :end-line 414, :max-fixed-arity 1, :fn-var true, :arglists ([] [n]), :doc "Given a number, returns a Period representing that many weeks.\n  Without an argument, returns a Period representing only weeks."}, days? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 660, :column 7, :end-line 660, :end-column 12, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Days"}, :name cljs-time.core/days?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 12, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 660, :end-line 660, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Days"}, years? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 645, :column 7, :end-line 645, :end-column 13, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Years"}, :name cljs-time.core/years?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 13, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 645, :end-line 645, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Years"}, minute {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 95, :column 4, :end-line 95, :end-column 10, :protocol cljs-time.core/DateTimeProtocol, :doc "Return the minute of hour component of the given date/time.", :arglists (quote ([this]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/minute, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the minute of hour component of the given date/time."}, mins-ago {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 680, :column 7, :end-line 680, :end-column 15, :arglists (quote ([d]))}, :name cljs-time.core/mins-ago, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 15, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 680, :end-line 680, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d]))}, time-zone-for-offset {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 350, :column 7, :end-line 350, :end-column 27, :arglists (quote ([hours] [hours minutes])), :doc "Returns a timezone map for the given offset, specified either in hours or\n  hours and minutes.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([hours] [hours minutes]), :arglists ([hours] [hours minutes]), :arglists-meta (nil nil)}}, :name cljs-time.core/time-zone-for-offset, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([hours] [hours minutes]), :arglists ([hours] [hours minutes]), :arglists-meta (nil nil)}, :method-params ([hours] [hours minutes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 350, :end-line 350, :max-fixed-arity 2, :fn-var true, :arglists ([hours] [hours minutes]), :doc "Returns a timezone map for the given offset, specified either in hours or\n  hours and minutes."}, periods {:name cljs-time.core/periods, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :line 134, :column 1, :end-line 134, :end-column 13, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 134, :column 6, :end-line 134, :end-column 13}}, do-at* {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 749, :column 7, :end-line 749, :end-column 13, :arglists (quote ([base-date-time body-fn]))}, :name cljs-time.core/do-at*, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 13, :method-params ([base-date-time body-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 749, :end-line 749, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-date-time body-fn]))}, in-seconds {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 109, :column 4, :end-line 109, :end-column 14, :protocol cljs-time.core/InTimeUnitProtocol, :doc "Return the time in seconds.", :arglists (quote ([this]))}, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-seconds, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the time in seconds."}, after? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 99, :column 4, :end-line 99, :end-column 10, :protocol cljs-time.core/DateTimeProtocol, :doc "Returns true if DateTime 'this' is strictly after date/time 'that'.", :arglists (quote ([this that]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/after?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 10, :method-params ([this that]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this that])), :doc "Returns true if DateTime 'this' is strictly after date/time 'that'."}, seconds? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 675, :column 7, :end-line 675, :end-column 15, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Seconds"}, :name cljs-time.core/seconds?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 15, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 675, :end-line 675, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Seconds"}, hour {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 94, :column 4, :end-line 94, :end-column 8, :protocol cljs-time.core/DateTimeProtocol, :doc "Return the hour of day component of the given date/time. A time of 12:01am will have an hour component of 0.", :arglists (quote ([this]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/hour, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 8, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the hour of day component of the given date/time. A time of 12:01am will have an hour component of 0."}, epoch {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 271, :column 7, :end-line 271, :end-column 12, :arglists (quote ([])), :doc "Returns a DateTime for the begining of the Unix epoch in the UTC time zone."}, :name cljs-time.core/epoch, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a DateTime for the begining of the Unix epoch in the UTC time zone."}, from-now {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 478, :column 7, :end-line 478, :end-column 15, :arglists (quote ([period])), :doc "Returns a DateTime a supplied period after the present.\n  e.g. `(-> 30 minutes from-now)`"}, :name cljs-time.core/from-now, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 15, :method-params ([period]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 478, :end-line 478, :max-fixed-arity 1, :fn-var true, :arglists (quote ([period])), :doc "Returns a DateTime a supplied period after the present.\n  e.g. `(-> 30 minutes from-now)`"}, day {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 92, :column 4, :end-line 92, :end-column 7, :protocol cljs-time.core/DateTimeProtocol, :doc "Return the day of month component of the given date/time.", :arglists (quote ([this]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/day, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 7, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the day of month component of the given date/time."}, in-minutes {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 110, :column 4, :end-line 110, :end-column 14, :protocol cljs-time.core/InTimeUnitProtocol, :doc "Return the time in minutes.", :arglists (quote ([this]))}, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-minutes, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the time in minutes."}, local-date-time {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 313, :column 7, :end-line 313, :end-column 22, :arglists (quote ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis])), :doc "Constructs and returns a new local DateTime.\nSpecify the year, month of year, day of month, hour of day, minute of hour,\nsecond of minute, and millisecond of second. Note that month and day are\n1-indexed while hour, second, minute, and millis are 0-indexed.\nAny number of least-significant components can be ommited, in which case\nthey will default to 1 or 0 as appropriate.", :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :arglists ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :arglists-meta (nil nil nil nil nil nil nil)}}, :name cljs-time.core/local-date-time, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :arglists ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :arglists-meta (nil nil nil nil nil nil nil)}, :method-params ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil nil), :column 1, :line 313, :end-line 313, :max-fixed-arity 7, :fn-var true, :arglists ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :doc "Constructs and returns a new local DateTime.\nSpecify the year, month of year, day of month, hour of day, minute of hour,\nsecond of minute, and millisecond of second. Note that month and day are\n1-indexed while hour, second, minute, and millis are 0-indexed.\nAny number of least-significant components can be ommited, in which case\nthey will default to 1 or 0 as appropriate."}, in-years- {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 534, :column 8, :end-line 534, :end-column 17, :private true, :arglists (quote ([{:keys [start end]}])), :doc "Returns the number of standard years in the given Interval."}, :private true, :name cljs-time.core/in-years-, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 17, :method-params ([p__19702]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 534, :end-line 534, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [start end]}])), :doc "Returns the number of standard years in the given Interval."}, overlaps? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 613, :column 7, :end-line 613, :end-column 16, :arglists (quote ([{start-a :start, end-a :end} {start-b :start, end-b :end}] [start-a end-a start-b end-b])), :doc "With 2 arguments: Returns true of the two given Intervals overlap.\n  Note that intervals that satisfy abuts? do not satisfy overlaps?\n\n  With 4 arguments: Returns true if the range specified by start-a and end-a\n  overlaps with the range specified by start-b and end-b.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{start-a :start, end-a :end} {start-b :start, end-b :end}] [start-a end-a start-b end-b]), :arglists ([{start-a :start, end-a :end} {start-b :start, end-b :end}] [start-a end-a start-b end-b]), :arglists-meta (nil nil)}}, :name cljs-time.core/overlaps?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([{start-a :start, end-a :end} {start-b :start, end-b :end}] [start-a end-a start-b end-b]), :arglists ([{start-a :start, end-a :end} {start-b :start, end-b :end}] [start-a end-a start-b end-b]), :arglists-meta (nil nil)}, :method-params ([{start-a :start, end-a :end} {start-b :start, end-b :end}] [start-a end-a start-b end-b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 613, :end-line 613, :max-fixed-arity 4, :fn-var true, :arglists ([{start-a :start, end-a :end} {start-b :start, end-b :end}] [start-a end-a start-b end-b]), :doc "With 2 arguments: Returns true of the two given Intervals overlap.\n  Note that intervals that satisfy abuts? do not satisfy overlaps?\n\n  With 4 arguments: Returns true if the range specified by start-a and end-a\n  overlaps with the range specified by start-b and end-b."}, date-time {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 289, :column 7, :end-line 289, :end-column 16, :arglists (quote ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis])), :doc "Constructs and returns a new DateTime in UTC.\n\n  Specify the year, month of year, day of month, hour of day, minute if hour,\n  second of minute, and millisecond of second. Note that month and day are\n  1-indexed while hour, second, minute, and millis are 0-indexed.\n\n  Any number of least-significant components can be ommited, in which case\n  they will default to 1 or 0 as appropriate.", :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :arglists ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :arglists-meta (nil nil nil nil nil nil nil)}}, :name cljs-time.core/date-time, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :arglists ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :arglists-meta (nil nil nil nil nil nil nil)}, :method-params ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil nil), :column 1, :line 289, :end-line 289, :max-fixed-arity 7, :fn-var true, :arglists ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :doc "Constructs and returns a new DateTime in UTC.\n\n  Specify the year, month of year, day of month, hour of day, minute if hour,\n  second of minute, and millisecond of second. Note that month and day are\n  1-indexed while hour, second, minute, and millis are 0-indexed.\n\n  Any number of least-significant components can be ommited, in which case\n  they will default to 1 or 0 as appropriate."}, first-day-of-the-month {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 696, :column 7, :end-line 696, :end-column 29, :arglists (quote ([dt] [year month])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dt] [year month]), :arglists ([dt] [year month]), :arglists-meta (nil nil)}}, :name cljs-time.core/first-day-of-the-month, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dt] [year month]), :arglists ([dt] [year month]), :arglists-meta (nil nil)}, :method-params ([dt] [year month]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 696, :end-line 696, :max-fixed-arity 2, :fn-var true, :arglists ([dt] [year month])}, default-time-zone {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 369, :column 7, :end-line 369, :end-column 24, :arglists (quote ([])), :doc "Returns the default timezone map for the current environment."}, :name cljs-time.core/default-time-zone, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 369, :end-line 369, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the default timezone map for the current environment."}, now {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 247, :column 7, :end-line 247, :end-column 10, :arglists (quote ([])), :doc "Returns a DateTime for the current instant in the UTC time zone."}, :name cljs-time.core/now, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a DateTime for the current instant in the UTC time zone."}, ->Period {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 126, :column 12, :end-line 126, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([years months weeks days hours minutes seconds millis]))}, :name cljs-time.core/->Period, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 18, :method-params ([years months weeks days hours minutes seconds millis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 126, :end-line 126, :max-fixed-arity 8, :fn-var true, :arglists (quote ([years months weeks days hours minutes seconds millis]))}, second {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 97, :column 4, :end-line 97, :end-column 10, :protocol cljs-time.core/DateTimeProtocol, :doc "Return the second of minute component of the given date/time.", :arglists (quote ([this]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/second, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the second of minute component of the given date/time."}, conversion-error {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 547, :column 7, :end-line 547, :end-column 23, :arglists (quote ([from to]))}, :name cljs-time.core/conversion-error, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 23, :method-params ([from to]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 547, :end-line 547, :max-fixed-arity 2, :fn-var true, :arglists (quote ([from to]))}, utc {:name cljs-time.core/utc, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :line 241, :column 1, :end-line 241, :end-column 9, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 241, :column 6, :end-line 241, :end-column 9}}, extend {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 508, :column 7, :end-line 508, :end-column 13, :arglists (quote ([in & by])), :doc "Returns an Interval with an end DateTime the specified Period after the end\n  of the given Interval", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(in by)], :arglists ([in & by]), :arglists-meta (nil)}}, :name cljs-time.core/extend, :variadic true, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(in by)], :arglists ([in & by]), :arglists-meta (nil)}, :method-params [(in by)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 508, :end-line 508, :max-fixed-arity 1, :fn-var true, :arglists ([in & by]), :doc "Returns an Interval with an end DateTime the specified Period after the end\n  of the given Interval"}, months? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 650, :column 7, :end-line 650, :end-column 14, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Months"}, :name cljs-time.core/months?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 14, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 650, :end-line 650, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Months"}, date-midnight {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 276, :column 7, :end-line 276, :end-column 20, :arglists (quote ([year] [year month] [year month day])), :doc "Constructs and returns a new DateTime at midnight in UTC.\n\n  Specify the year, month of year, day of month. Note that month and day are\n  1-indexed. Any number of least-significant components can be ommited, in\n  which case they will default to 1.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([year] [year month] [year month day]), :arglists ([year] [year month] [year month day]), :arglists-meta (nil nil nil)}}, :name cljs-time.core/date-midnight, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([year] [year month] [year month day]), :arglists ([year] [year month] [year month day]), :arglists-meta (nil nil nil)}, :method-params ([year] [year month] [year month day]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 3, :fn-var true, :arglists ([year] [year month] [year month day]), :doc "Constructs and returns a new DateTime at midnight in UTC.\n\n  Specify the year, month of year, day of month. Note that month and day are\n  1-indexed. Any number of least-significant components can be ommited, in\n  which case they will default to 1."}, plus- {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 101, :column 4, :end-line 101, :end-column 9, :protocol cljs-time.core/DateTimeProtocol, :doc "Returns a new date/time corresponding to the given date/time moved forwards by the given Period(s).", :arglists (quote ([this period]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/plus-, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 9, :method-params ([this period]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this period])), :doc "Returns a new date/time corresponding to the given date/time moved forwards by the given Period(s)."}, time-now {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 252, :column 7, :end-line 252, :end-column 15, :arglists (quote ([])), :doc "Returns a local DateTime for the current instant without date or time zone\n  in the current time zone."}, :name cljs-time.core/time-now, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a local DateTime for the current instant without date or time zone\n  in the current time zone."}, day-of-week {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 93, :column 4, :end-line 93, :end-column 15, :protocol cljs-time.core/DateTimeProtocol, :doc "Return the day of week component of the given date/time. Monday is 1 and Sunday is 7", :arglists (quote ([this]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/day-of-week, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the day of week component of the given date/time. Monday is 1 and Sunday is 7"}, last-day-of-the-month- {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 104, :column 4, :end-line 104, :end-column 26, :protocol cljs-time.core/DateTimeProtocol, :doc "Returns the last day of the month", :arglists (quote ([this]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/last-day-of-the-month-, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the last day of the month"}, number-of-days-in-the-month {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 690, :column 7, :end-line 690, :end-column 34, :arglists (quote ([dt] [year month])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dt] [year month]), :arglists ([dt] [year month]), :arglists-meta (nil nil)}}, :name cljs-time.core/number-of-days-in-the-month, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dt] [year month]), :arglists ([dt] [year month]), :arglists-meta (nil nil)}, :method-params ([dt] [year month]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 690, :end-line 690, :max-fixed-arity 2, :fn-var true, :arglists ([dt] [year month])}, months {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 408, :column 7, :end-line 408, :end-column 13, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many months.\n  Without an argument, returns a Period representing only months.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :name cljs-time.core/months, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 408, :end-line 408, :max-fixed-arity 1, :fn-var true, :arglists ([] [n]), :doc "Given a number, returns a Period representing that many months.\n  Without an argument, returns a Period representing only months."}, in-days {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 112, :column 4, :end-line 112, :end-column 11, :protocol cljs-time.core/InTimeUnitProtocol, :doc "Return the time in days.", :arglists (quote ([this]))}, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-days, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the time in days."}, today {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 341, :column 7, :end-line 341, :end-column 12, :arglists (quote ([])), :doc "Constructs and returns a new local DateTime representing today's date.\n  local DateTime objects do not deal with timezones at all."}, :name cljs-time.core/today, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 341, :end-line 341, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Constructs and returns a new local DateTime representing today's date.\n  local DateTime objects do not deal with timezones at all."}, month {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 91, :column 4, :end-line 91, :end-column 9, :protocol cljs-time.core/DateTimeProtocol, :doc "Return the month component of the given date/time.", :arglists (quote ([this]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/month, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the month component of the given date/time."}, in-months- {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 520, :column 8, :end-line 520, :end-column 18, :private true, :arglists (quote ([{:keys [start end], :as interval}])), :doc "Returns the number of months in the given Interval.\n\n  For example, the interval 2nd Jan 2012 midnight to 2nd Feb 2012 midnight,\n  returns 1 month.\n\n  Likewise, 29th Dec 2011 midnight to 29th Feb 2012 midnight returns 2 months.\n\n  But also, 31st Dec 2011 midnight to 29th Feb 2012 midnight returns 2 months.\n\n  And, 28th Dec 2012 midnight to 28th Feb 2013 midnight returns 2 months."}, :private true, :name cljs-time.core/in-months-, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 18, :method-params ([p__19699]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 520, :end-line 520, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [start end], :as interval}])), :doc "Returns the number of months in the given Interval.\n\n  For example, the interval 2nd Jan 2012 midnight to 2nd Feb 2012 midnight,\n  returns 1 month.\n\n  Likewise, 29th Dec 2011 midnight to 29th Feb 2012 midnight returns 2 months.\n\n  But also, 31st Dec 2011 midnight to 29th Feb 2012 midnight returns 2 months.\n\n  And, 28th Dec 2012 midnight to 28th Feb 2013 midnight returns 2 months."}, start {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 498, :column 7, :end-line 498, :end-column 12, :arglists (quote ([in])), :doc "Returns the start DateTime of an Interval."}, :name cljs-time.core/start, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 12, :method-params ([in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 498, :end-line 498, :max-fixed-arity 1, :fn-var true, :arglists (quote ([in])), :doc "Returns the start DateTime of an Interval."}, minus {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 458, :column 7, :end-line 458, :end-column 12, :arglists (quote ([dt p] [dt p & ps])), :doc "Returns a new date/time object corresponding to the given date/time\n  moved backwards by the given Period(s).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([dt p]), :arglists ([dt p] [dt p & ps]), :arglists-meta (nil nil)}}, :name cljs-time.core/minus, :variadic true, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([dt p]), :arglists ([dt p] [dt p & ps]), :arglists-meta (nil nil)}, :method-params ([dt p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 458, :end-line 458, :max-fixed-arity 2, :fn-var true, :arglists ([dt p] [dt p & ps]), :doc "Returns a new date/time object corresponding to the given date/time\n  moved backwards by the given Period(s)."}, days {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 420, :column 7, :end-line 420, :end-column 11, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many days.\n  Without an argument, returns a Period representing only days.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :name cljs-time.core/days, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 420, :end-line 420, :max-fixed-arity 1, :fn-var true, :arglists ([] [n]), :doc "Given a number, returns a Period representing that many days.\n  Without an argument, returns a Period representing only days."}, period-type? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 642, :column 7, :end-line 642, :end-column 19, :arglists (quote ([type x]))}, :name cljs-time.core/period-type?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 19, :method-params ([type x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 642, :end-line 642, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type x]))}, in-hours {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 111, :column 4, :end-line 111, :end-column 12, :protocol cljs-time.core/InTimeUnitProtocol, :doc "Return the time in hours.", :arglists (quote ([this]))}, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-hours, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the time in hours."}, map->Period {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 126, :column 12, :end-line 126, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__19604]))}, :name cljs-time.core/map->Period, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 18, :method-params ([G__19604]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19604]))}, at-midnight {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 258, :column 7, :end-line 258, :end-column 18, :arglists (quote ([datetime]))}, :name cljs-time.core/at-midnight, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 18, :method-params ([datetime]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([datetime]))}, DateTimeProtocol {:meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 88, :column 14, :end-line 88, :end-column 30, :doc "Interface for various date time functions", :protocol-symbol true, :protocol-info {:methods {minute [[this]], after? [[this that]], hour [[this]], day [[this]], second [[this]], plus- [[this period]], day-of-week [[this]], last-day-of-the-month- [[this]], month [[this]], before? [[this that]], year [[this]], minus- [[this period]], sec [[this]], first-day-of-the-month- [[this]], milli [[this]]}}}, :protocol-symbol true, :name cljs-time.core/DateTimeProtocol, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 30, :column 1, :line 88, :protocol-info {:methods {minute [[this]], after? [[this that]], hour [[this]], day [[this]], second [[this]], plus- [[this period]], day-of-week [[this]], last-day-of-the-month- [[this]], month [[this]], before? [[this that]], year [[this]], minus- [[this period]], sec [[this]], first-day-of-the-month- [[this]], milli [[this]]}}, :info nil, :end-line 88, :impls #{goog/date.DateTime goog/date.Date goog/date.UtcDateTime}, :doc "Interface for various date time functions"}, InTimeUnitProtocol {:meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 106, :column 14, :end-line 106, :end-column 32, :doc "Interface for in-<time unit> functions", :protocol-symbol true, :protocol-info {:methods {in-millis [[this]], in-seconds [[this]], in-minutes [[this]], in-hours [[this]], in-days [[this]], in-weeks [[this]], in-months [[this]], in-years [[this]]}}}, :protocol-symbol true, :name cljs-time.core/InTimeUnitProtocol, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 32, :column 1, :line 106, :protocol-info {:methods {in-millis [[this]], in-seconds [[this]], in-minutes [[this]], in-hours [[this]], in-days [[this]], in-weeks [[this]], in-months [[this]], in-years [[this]]}}, :info nil, :end-line 106, :impls #{cljs-time/core.Period cljs-time/core.Interval}, :doc "Interface for in-<time unit> functions"}, within? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 598, :column 7, :end-line 598, :end-column 14, :arglists (quote ([{:keys [start end]} date] [start end date])), :doc "With 2 arguments: Returns true if the given Interval contains the given\n  DateTime. Note that if the DateTime is exactly equal to the\n  end of the interval, this function returns false.\n\n  With 3 arguments: Returns true if the start DateTime is\n  equal to or before and the end DateTime is equal to or after the test\n  DateTime.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([{:keys [start end]} date] [start end date]), :arglists ([{:keys [start end]} date] [start end date]), :arglists-meta (nil nil)}}, :name cljs-time.core/within?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([{:keys [start end]} date] [start end date]), :arglists ([{:keys [start end]} date] [start end date]), :arglists-meta (nil nil)}, :method-params ([{:keys [start end]} date] [start end date]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 598, :end-line 598, :max-fixed-arity 3, :fn-var true, :arglists ([{:keys [start end]} date] [start end date]), :doc "With 2 arguments: Returns true if the given Interval contains the given\n  DateTime. Note that if the DateTime is exactly equal to the\n  end of the interval, this function returns false.\n\n  With 3 arguments: Returns true if the start DateTime is\n  equal to or before and the end DateTime is equal to or after the test\n  DateTime."}, seconds {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 438, :column 7, :end-line 438, :end-column 14, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many seconds.\n  Without an argument, returns a Period representing only seconds.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :name cljs-time.core/seconds, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 438, :end-line 438, :max-fixed-arity 1, :fn-var true, :arglists ([] [n]), :doc "Given a number, returns a Period representing that many seconds.\n  Without an argument, returns a Period representing only seconds."}, in-years {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 115, :column 4, :end-line 115, :end-column 12, :protocol cljs-time.core/InTimeUnitProtocol, :doc "Return the time in years", :arglists (quote ([this]))}, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-years, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the time in years"}, ->period {:name cljs-time.core/->period, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :line 702, :column 1, :end-line 702, :end-column 19, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 702, :column 11, :end-line 702, :end-column 19}}, today-at-midnight {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 266, :column 7, :end-line 266, :end-column 24, :arglists (quote ([])), :doc "Returns a DateTime for today at midnight in the UTC time zone."}, :name cljs-time.core/today-at-midnight, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a DateTime for today at midnight in the UTC time zone."}, ->Interval {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 117, :column 12, :end-line 117, :end-column 20, :internal-ctor true, :factory :positional, :arglists (quote ([start end]))}, :name cljs-time.core/->Interval, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 20, :method-params ([start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start end]))}, *sys-time* {:name cljs-time.core/*sys-time*, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :line 75, :column 1, :end-line 75, :end-column 26, :dynamic true, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 75, :column 16, :end-line 75, :end-column 26, :dynamic true}}, before? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 100, :column 4, :end-line 100, :end-column 11, :protocol cljs-time.core/DateTimeProtocol, :doc "Returns true if DateTime 'this' is strictly before date/time 'that'.", :arglists (quote ([this that]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/before?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 11, :method-params ([this that]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this that])), :doc "Returns true if DateTime 'this' is strictly before date/time 'that'."}, month-range {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 514, :column 8, :end-line 514, :end-column 19, :private true, :arglists (quote ([{:keys [start end]}]))}, :private true, :name cljs-time.core/month-range, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 19, :method-params ([p__19695]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 514, :end-line 514, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [start end]}]))}, latest {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 491, :column 7, :end-line 491, :end-column 13, :arglists (quote ([dt1 dt2] [dts])), :doc "Returns the latest of the supplied DateTimes", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dt1 dt2] [dts]), :arglists ([dt1 dt2] [dts]), :arglists-meta (nil nil)}}, :name cljs-time.core/latest, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dt1 dt2] [dts]), :arglists ([dt1 dt2] [dts]), :arglists-meta (nil nil)}, :method-params ([dt1 dt2] [dts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 491, :end-line 491, :max-fixed-arity 2, :fn-var true, :arglists ([dt1 dt2] [dts]), :doc "Returns the latest of the supplied DateTimes"}, hours? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 665, :column 7, :end-line 665, :end-column 13, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Hours"}, :name cljs-time.core/hours?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 13, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 665, :end-line 665, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Hours"}, Interval {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs-time.core/Interval, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 20, :type true, :column 12, :internal-ctor true, :line 117, :record true, :end-line 117, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, year {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 90, :column 4, :end-line 90, :end-column 8, :protocol cljs-time.core/DateTimeProtocol, :doc "Return the year component of the given date/time.", :arglists (quote ([this]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/year, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 8, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the year component of the given date/time."}, earliest {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 484, :column 7, :end-line 484, :end-column 15, :arglists (quote ([dt1 dt2] [dts])), :doc "Returns the earliest of the supplied DateTimes", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dt1 dt2] [dts]), :arglists ([dt1 dt2] [dts]), :arglists-meta (nil nil)}}, :name cljs-time.core/earliest, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dt1 dt2] [dts]), :arglists ([dt1 dt2] [dts]), :arglists-meta (nil nil)}, :method-params ([dt1 dt2] [dts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 484, :end-line 484, :max-fixed-arity 2, :fn-var true, :arglists ([dt1 dt2] [dts]), :doc "Returns the earliest of the supplied DateTimes"}, period-fn {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 176, :column 7, :end-line 176, :end-column 16, :arglists (quote ([p]))}, :name cljs-time.core/period-fn, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 16, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, period? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 639, :column 7, :end-line 639, :end-column 14, :arglists (quote ([x]))}, :name cljs-time.core/period?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 639, :end-line 639, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, yesterday {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 473, :column 7, :end-line 473, :end-column 16, :arglists (quote ([])), :doc "Returns a DateTime for yesterday relative to now"}, :name cljs-time.core/yesterday, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 473, :end-line 473, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a DateTime for yesterday relative to now"}, minutes? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 670, :column 7, :end-line 670, :end-column 15, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Minutes"}, :name cljs-time.core/minutes?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 15, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 670, :end-line 670, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Minutes"}, today-at {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 733, :column 7, :end-line 733, :end-column 15, :arglists (quote ([hours minutes seconds millis] [hours minutes seconds] [hours minutes])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([hours minutes seconds millis] [hours minutes seconds] [hours minutes]), :arglists ([hours minutes seconds millis] [hours minutes seconds] [hours minutes]), :arglists-meta (nil nil nil)}}, :name cljs-time.core/today-at, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([hours minutes seconds millis] [hours minutes seconds] [hours minutes]), :arglists ([hours minutes seconds millis] [hours minutes seconds] [hours minutes]), :arglists-meta (nil nil nil)}, :method-params ([hours minutes seconds millis] [hours minutes seconds] [hours minutes]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 733, :end-line 733, :max-fixed-arity 4, :fn-var true, :arglists ([hours minutes seconds millis] [hours minutes seconds] [hours minutes])}, Period {:num-fields 8, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs-time.core/Period, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 18, :type true, :column 12, :internal-ctor true, :line 126, :record true, :end-line 126, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, local-date {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 335, :column 7, :end-line 335, :end-column 17, :arglists (quote ([year month day])), :doc "Constructs and returns a new local DateTime.\nSpecify the year, month, and day. Does not deal with timezones."}, :name cljs-time.core/local-date, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 17, :method-params ([year month day]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 3, :fn-var true, :arglists (quote ([year month day])), :doc "Constructs and returns a new local DateTime.\nSpecify the year, month, and day. Does not deal with timezones."}, plus {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 450, :column 7, :end-line 450, :end-column 11, :arglists (quote ([dt p] [dt p & ps])), :doc "Returns a new date/time corresponding to the given date/time moved\n  forwards by the given Period(s).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([dt p]), :arglists ([dt p] [dt p & ps]), :arglists-meta (nil nil)}}, :name cljs-time.core/plus, :variadic true, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([dt p]), :arglists ([dt p] [dt p & ps]), :arglists-meta (nil nil)}, :method-params ([dt p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 450, :end-line 450, :max-fixed-arity 2, :fn-var true, :arglists ([dt p] [dt p & ps]), :doc "Returns a new date/time corresponding to the given date/time moved\n  forwards by the given Period(s)."}, minus- {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 102, :column 4, :end-line 102, :end-column 10, :protocol cljs-time.core/DateTimeProtocol, :doc "Returns a new date/time corresponding to the given date/time moved backwards by the given Period(s).", :arglists (quote ([this period]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/minus-, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 10, :method-params ([this period]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this period])), :doc "Returns a new date/time corresponding to the given date/time moved backwards by the given Period(s)."}, weeks? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 655, :column 7, :end-line 655, :end-column 13, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Weeks"}, :name cljs-time.core/weeks?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 13, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 655, :end-line 655, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Weeks"}, abuts? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 627, :column 7, :end-line 627, :end-column 13, :arglists (quote ([{start-a :start, end-a :end} {start-b :start, end-b :end}])), :doc "Returns true if Interval a abuts b, i.e. then end of a is exactly the\n  beginning of b."}, :name cljs-time.core/abuts?, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 13, :method-params ([p__19729 p__19730]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 627, :end-line 627, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{start-a :start, end-a :end} {start-b :start, end-b :end}])), :doc "Returns true if Interval a abuts b, i.e. then end of a is exactly the\n  beginning of b."}, sec {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 96, :column 4, :end-line 96, :end-column 7, :protocol cljs-time.core/DateTimeProtocol, :doc "Return the second of minute component of the given date/time.", :arglists (quote ([this]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/sec, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 7, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the second of minute component of the given date/time."}, hours {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 426, :column 7, :end-line 426, :end-column 12, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many hours.\n  Without an argument, returns a Period representing only hours.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :name cljs-time.core/hours, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 426, :end-line 426, :max-fixed-arity 1, :fn-var true, :arglists ([] [n]), :doc "Given a number, returns a Period representing that many hours.\n  Without an argument, returns a Period representing only hours."}, years {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 402, :column 7, :end-line 402, :end-column 12, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many years.\n  Without an argument, returns a Period representing only years.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :name cljs-time.core/years, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 402, :end-line 402, :max-fixed-arity 1, :fn-var true, :arglists ([] [n]), :doc "Given a number, returns a Period representing that many years.\n  Without an argument, returns a Period representing only years."}, first-day-of-the-month- {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 103, :column 4, :end-line 103, :end-column 27, :protocol cljs-time.core/DateTimeProtocol, :doc "Returns the first day of the month", :arglists (quote ([this]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/first-day-of-the-month-, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the first day of the month"}, in-millis {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 108, :column 4, :end-line 108, :end-column 13, :protocol cljs-time.core/InTimeUnitProtocol, :doc "Return the time in milliseconds.", :arglists (quote ([this]))}, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-millis, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the time in milliseconds."}, milli {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/cljs_time/core.cljs", :line 98, :column 4, :end-line 98, :end-column 9, :protocol cljs-time.core/DateTimeProtocol, :doc "Return the millisecond of second component of the given date/time.", :arglists (quote ([this]))}, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/milli, :variadic false, :file "resources/public/js/compiled/out/cljs_time/core.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return the millisecond of second component of the given date/time."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :transitions :offset :default :- :start :months :days :type :seconds :rules :+ :id :std_offset :hours :years :unsupported-operation :cljs-time.core/time-zone :minutes :end :hierarchy :weeks :else-is-same-date :millis :names}, :order [:start :end :years :months :weeks :days :hours :minutes :seconds :millis :else :id :std_offset :names :transitions :- :+ :offset :rules :type :cljs-time.core/time-zone :else-is-same-date :unsupported-operation :default :hierarchy]}, :doc "### The core namespace for date-time operations in the cljs-time library.\n\n  Create a DateTime instance with date-time (or a local DateTime instance with local-date-time),\n  specifying the year, month, day, hour, minute, second, and millisecond:\n\n    => (date-time 1986 10 14 4 3 27 456)\n    #<DateTime 1986-10-14T04:03:27.456Z>\n\n    => (local-date-time 1986 10 14 4 3 27 456)\n    #<DateTime 1986-10-14T04:03:27.456>\n\n  Less-significant fields can be omitted:\n\n    => (date-time 1986 10 14)\n    #<DateTime 1986-10-14T00:00:00.000Z>\n\n    => (local-date-time 1986 10 14)\n    #<DateTime 1986-10-14T00:00:00.000>\n\n  Get the current time with (now) and the start of the Unix epoch with (epoch).\n\n  Once you have a date-time, use accessors like hour and second to access the\n  corresponding fields:\n\n    => (hour (date-time 1986 10 14 22))\n    22\n\n    => (hour (local-date-time 1986 10 14 22))\n    22\n\n  The functions after? and before? determine the relative position of two\n  DateTime instances:\n\n    => (after? (date-time 1986 10) (date-time 1986 9))\n    true\n\n    => (after? (local-date-time 1986 10) (local-date-time 1986 9))\n    true\n\n  Often you will want to find a date some amount of time from a given date. For\n  example, to find the time 1 month and 3 weeks from a given date-time:\n\n    => (plus (date-time 1986 10 14) (months 1) (weeks 3))\n    #<DateTime 1986-12-05T00:00:00.000Z>\n\n    => (plus (local-date-time 1986 10 14) (months 1) (weeks 3))\n    #<DateTime 1986-12-05T00:00:00.000Z>\n\n  An Interval is used to represent the span of time between two DateTime\n  instances. Construct one using interval, then query them using within?,\n  overlaps?, and abuts?\n\n    => (within? (interval (date-time 1986) (date-time 1990)) (date-time 1987))\n    true\n\n  To find the amount of time encompased by an interval, use in-seconds and\n  in-minutes:\n\n    => (in-minutes (interval (date-time 1986 10 2) (date-time 1986 10 14)))\n    17280\n\n  Note that all functions in this namespace work with Joda objects or ints. If\n  you need to print or parse date-times, see cljs-time.format. If you need to\n  ceorce date-times to or from other types, see cljs-time.coerce."}