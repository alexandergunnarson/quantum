;; Analyzed by ClojureScript 0.0-3269
{:name clojure.core.rrb-vector, :doc "An implementation of the confluently persistent vector data\n  structure introduced in Bagwell, Rompf, \"RRB-Trees: Efficient\n  Immutable Vectors\", EPFL-REPORT-169879, September, 2011.\n\n  RRB-Trees build upon Clojure's PersistentVectors, adding logarithmic\n  time concatenation and slicing.\n\n  The main API entry points are clojure.core.rrb-vector/catvec,\n  performing vector concatenation, and clojure.core.rrb-vector/subvec,\n  which produces a new vector containing the appropriate subrange of\n  the input vector (in contrast to cljs.core/subvec, which returns a\n  view on the input vector).\n\n  The implementation allows for seamless interoperability with\n  cljs.core/PersistentVector and cljs.core.Subvec instances:\n  clojure.core.rrb-vector/catvec and clojure.core.rrb-vector/subvec\n  convert their inputs to clojure.core.rrb-vector.rrbt/Vector\n  instances whenever necessary (this is a very fast constant time\n  operation for PersistentVector; for Subvec it is O(log n), where n\n  is the size of the underlying vector).\n\n  clojure.core.rrb-vector also exports its own versions of vector and\n  vec which always produce clojure.core.rrb-vector.rrbt.Vector\n  instances.", :excludes #{vec vector subvec}, :use-macros {gen-vector-method clojure.core.rrb-vector.macros}, :require-macros {clojure.core.rrb-vector.macros clojure.core.rrb-vector.macros}, :uses {-as-rrbt clojure.core.rrb-vector.rrbt, -slicev clojure.core.rrb-vector.protocols, -splicev clojure.core.rrb-vector.protocols}, :requires {clojure.core.rrb-vector.protocols clojure.core.rrb-vector.protocols, clojure.core.rrb-vector.rrbt clojure.core.rrb-vector.rrbt, clojure.core.rrb-vector.interop clojure.core.rrb-vector.interop}, :imports nil, :defs {catvec {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector.cljs", :line 36, :column 7, :end-line 36, :end-column 13, :arglists (quote ([] [v1] [v1 v2] [v1 v2 v3] [v1 v2 v3 v4] [v1 v2 v3 v4 & vn])), :doc "Concatenates the given vectors in logarithmic time.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([] [v1] [v1 v2] [v1 v2 v3] [v1 v2 v3 v4]), :arglists ([] [v1] [v1 v2] [v1 v2 v3] [v1 v2 v3 v4] [v1 v2 v3 v4 & vn]), :arglists-meta (nil nil nil nil nil nil)}}, :name clojure.core.rrb-vector/catvec, :variadic true, :file "resources/public/js/compiled/out/clojure/core/rrb_vector.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([] [v1] [v1 v2] [v1 v2 v3] [v1 v2 v3 v4]), :arglists ([] [v1] [v1 v2] [v1 v2 v3] [v1 v2 v3 v4] [v1 v2 v3 v4 & vn]), :arglists-meta (nil nil nil nil nil nil)}, :method-params ([] [v1] [v1 v2] [v1 v2 v3] [v1 v2 v3 v4]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 4, :fn-var true, :arglists ([] [v1] [v1 v2] [v1 v2 v3] [v1 v2 v3 v4] [v1 v2 v3 v4 & vn]), :doc "Concatenates the given vectors in logarithmic time."}, subvec {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector.cljs", :line 52, :column 7, :end-line 52, :end-column 13, :arglists (quote ([v start] [v start end])), :doc "Returns a new vector containing the elements of the given vector v\n  lying between the start (inclusive) and end (exclusive) indices in\n  logarithmic time. end defaults to end of vector. The resulting\n  vector shares structure with the original, but does not hold on to\n  any elements of the original vector lying outside the given index\n  range.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v start] [v start end]), :arglists ([v start] [v start end]), :arglists-meta (nil nil)}}, :name clojure.core.rrb-vector/subvec, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v start] [v start end]), :arglists ([v start] [v start end]), :arglists-meta (nil nil)}, :method-params ([v start] [v start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 3, :fn-var true, :arglists ([v start] [v start end]), :doc "Returns a new vector containing the elements of the given vector v\n  lying between the start (inclusive) and end (exclusive) indices in\n  logarithmic time. end defaults to end of vector. The resulting\n  vector shares structure with the original, but does not hold on to\n  any elements of the original vector lying outside the given index\n  range."}, vector {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector.cljs", :line 64, :column 7, :end-line 64, :end-column 13, :arglists (quote ([] [x1] [x1 x2] [x1 x2 x3] [x1 x2 x3 x4] [x1 x2 x3 x4 & xn])), :doc "Creates a new vector containing the args.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([] [x1] [x1 x2] [x1 x2 x3] [x1 x2 x3 x4]), :arglists ([] [x1] [x1 x2] [x1 x2 x3] [x1 x2 x3 x4] [x1 x2 x3 x4 & xn]), :arglists-meta (nil nil nil nil nil nil)}}, :name clojure.core.rrb-vector/vector, :variadic true, :file "resources/public/js/compiled/out/clojure/core/rrb_vector.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([] [x1] [x1 x2] [x1 x2 x3] [x1 x2 x3 x4]), :arglists ([] [x1] [x1 x2] [x1 x2 x3] [x1 x2 x3 x4] [x1 x2 x3 x4 & xn]), :arglists-meta (nil nil nil nil nil nil)}, :method-params ([] [x1] [x1 x2] [x1 x2 x3] [x1 x2 x3 x4]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 4, :fn-var true, :arglists ([] [x1] [x1 x2] [x1 x2 x3] [x1 x2 x3 x4] [x1 x2 x3 x4 & xn]), :doc "Creates a new vector containing the args."}, vec {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector.cljs", :line 86, :column 7, :end-line 86, :end-column 10, :arglists (quote ([coll])), :doc "Returns a vector containing the contents of coll.\n\n  If coll is a vector, returns an RRB vector using the internal tree\n  of coll."}, :name clojure.core.rrb-vector/vec, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector.cljs", :end-column 10, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns a vector containing the contents of coll.\n\n  If coll is a vector, returns an RRB vector using the internal tree\n  of coll."}}}