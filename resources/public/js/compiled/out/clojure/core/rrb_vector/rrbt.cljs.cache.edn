;; Analyzed by ClojureScript 0.0-3269
{:use-macros nil, :excludes #{push-tail new-path do-assoc pop-tail array-for}, :name clojure.core.rrb-vector.rrbt, :imports nil, :requires {clojure.core.rrb-vector.protocols clojure.core.rrb-vector.protocols, clojure.core.rrb-vector.nodes clojure.core.rrb-vector.nodes, clojure.core.rrb-vector.trees clojure.core.rrb-vector.trees, clojure.core.rrb-vector.transients clojure.core.rrb-vector.transients}, :uses {editable-root clojure.core.rrb-vector.transients, ranges clojure.core.rrb-vector.nodes, push-tail! clojure.core.rrb-vector.transients, do-assoc! clojure.core.rrb-vector.transients, regular? clojure.core.rrb-vector.nodes, ensure-editable clojure.core.rrb-vector.transients, push-tail clojure.core.rrb-vector.trees, remove-leftmost-child clojure.core.rrb-vector.nodes, last-range clojure.core.rrb-vector.nodes, first-child clojure.core.rrb-vector.nodes, new-path* clojure.core.rrb-vector.nodes, new-path clojure.core.rrb-vector.trees, editable-tail clojure.core.rrb-vector.transients, do-assoc clojure.core.rrb-vector.trees, regular-ranges clojure.core.rrb-vector.nodes, -slicev clojure.core.rrb-vector.protocols, fold-tail clojure.core.rrb-vector.nodes, PSliceableVector clojure.core.rrb-vector.protocols, pop-tail clojure.core.rrb-vector.trees, index-of-nil clojure.core.rrb-vector.nodes, array-for clojure.core.rrb-vector.trees, tail-offset clojure.core.rrb-vector.trees, overflow? clojure.core.rrb-vector.nodes, empty-node clojure.core.rrb-vector.nodes, replace-leftmost-child clojure.core.rrb-vector.nodes, -splicev clojure.core.rrb-vector.protocols, last-child clojure.core.rrb-vector.nodes, PSpliceableVector clojure.core.rrb-vector.protocols, pop-tail! clojure.core.rrb-vector.transients, replace-rightmost-child clojure.core.rrb-vector.nodes}, :defs {shift-from-to {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 582, :column 7, :end-line 582, :end-column 20, :arglists (quote ([node from to]))}, :name clojure.core.rrb-vector.rrbt/shift-from-to, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 20, :method-params ([node from to]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 582, :end-line 582, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node from to]))}, slot-count {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 603, :column 7, :end-line 603, :end-column 17, :arglists (quote ([node shift]))}, :name clojure.core.rrb-vector.rrbt/slot-count, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 17, :method-params ([node shift]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 603, :end-line 603, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node shift]))}, zippath {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 794, :column 7, :end-line 794, :end-column 14, :arglists (quote ([shift n1 cnt1 n2 cnt2 transferred-leaves]))}, :name clojure.core.rrb-vector.rrbt/zippath, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 14, :method-params ([shift n1 cnt1 n2 cnt2 transferred-leaves]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 794, :end-line 794, :max-fixed-arity 6, :fn-var true, :arglists (quote ([shift n1 cnt1 n2 cnt2 transferred-leaves]))}, rrb-chunked-seq {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 113, :column 7, :end-line 113, :end-column 22, :arglists (quote ([vec i off] [vec node i off] [vec node i off meta])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([vec i off] [vec node i off] [vec node i off meta]), :arglists ([vec i off] [vec node i off] [vec node i off meta]), :arglists-meta (nil nil nil)}}, :name clojure.core.rrb-vector.rrbt/rrb-chunked-seq, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([vec i off] [vec node i off] [vec node i off meta]), :arglists ([vec i off] [vec node i off] [vec node i off meta]), :arglists-meta (nil nil nil)}, :method-params ([vec i off] [vec node i off] [vec node i off meta]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 5, :fn-var true, :arglists ([vec i off] [vec node i off] [vec node i off meta])}, -as-rrbt {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 22, :column 4, :end-line 22, :end-column 12, :protocol clojure.core.rrb-vector.rrbt/AsRRBT, :doc nil, :arglists (quote ([v]))}, :protocol clojure.core.rrb-vector.rrbt/AsRRBT, :name clojure.core.rrb-vector.rrbt/-as-rrbt, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 12, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc nil}, AsRRBT {:meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 21, :column 14, :end-line 21, :end-column 20, :doc nil, :protocol-symbol true, :protocol-info {:methods {-as-rrbt [[v]]}}}, :protocol-symbol true, :name clojure.core.rrb-vector.rrbt/AsRRBT, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 20, :column 1, :line 21, :protocol-info {:methods {-as-rrbt [[v]]}}, :info nil, :end-line 21, :impls #{cljs.core/Subvec cljs/core.PersistentVector clojure.core.rrb-vector.rrbt/Vector}, :doc nil}, slice-left {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 178, :column 7, :end-line 178, :end-column 17, :arglists (quote ([node shift start end]))}, :name clojure.core.rrb-vector.rrbt/slice-left, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 17, :method-params ([node shift start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 4, :fn-var true, :arglists (quote ([node shift start end]))}, ->Transient {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 928, :column 10, :end-line 928, :end-column 19, :protocols #{cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative}, :skip-protocol-flag #{cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative}, :factory :positional, :arglists (quote ([cnt shift root tail tidx]))}, :protocols #{cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative}, :name clojure.core.rrb-vector.rrbt/->Transient, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 19, :method-params ([cnt shift root tail tidx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 928, :end-line 928, :max-fixed-arity 5, :fn-var true, :arglists (quote ([cnt shift root tail tidx])), :skip-protocol-flag #{cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative}}, RRBChunkedSeq {:num-fields 6, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta clojure.core.rrb-vector.rrbt/Object cljs.core/IPrintWithWriter cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name clojure.core.rrb-vector.rrbt/RRBChunkedSeq, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 23, :type true, :column 10, :line 29, :record false, :end-line 29, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, subtree-branch-count {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 612, :column 7, :end-line 612, :end-column 27, :arglists (quote ([node shift]))}, :name clojure.core.rrb-vector.rrbt/subtree-branch-count, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 27, :method-params ([node shift]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 612, :end-line 612, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node shift]))}, PSliceableVector {:impls (clojure.core.rrb-vector.rrbt/Vector)}, rrbt-concat-threshold {:name clojure.core.rrb-vector.rrbt/rrbt-concat-threshold, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 18, :column 1, :end-line 18, :end-column 35, :const true, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 18, :column 14, :end-line 18, :end-column 35, :const true}}, slice-right {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 125, :column 7, :end-line 125, :end-column 18, :arglists (quote ([node shift end]))}, :name clojure.core.rrb-vector.rrbt/slice-right, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 18, :method-params ([node shift end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node shift end]))}, max-extra-search-steps {:name clojure.core.rrb-vector.rrbt/max-extra-search-steps, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 19, :column 1, :end-line 19, :end-column 36, :const true, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 19, :column 14, :end-line 19, :end-column 36, :const true}}, child-seq {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 692, :column 7, :end-line 692, :end-column 16, :arglists (quote ([node shift cnt]))}, :name clojure.core.rrb-vector.rrbt/child-seq, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 16, :method-params ([node shift cnt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 692, :end-line 692, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node shift cnt]))}, ->RRBChunkedSeq {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 29, :column 10, :end-line 29, :end-column 23, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta clojure.core.rrb-vector.rrbt/Object cljs.core/IPrintWithWriter cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([vec node i off meta __hash]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta clojure.core.rrb-vector.rrbt/Object cljs.core/IPrintWithWriter cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name clojure.core.rrb-vector.rrbt/->RRBChunkedSeq, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 23, :method-params ([vec node i off meta __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 29, :end-line 29, :max-fixed-arity 6, :fn-var true, :arglists (quote ([vec node i off meta __hash])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, rebalance-leaves {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 633, :column 7, :end-line 633, :end-column 23, :arglists (quote ([n1 cnt1 n2 cnt2 transferred-leaves]))}, :name clojure.core.rrb-vector.rrbt/rebalance-leaves, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 23, :method-params ([n1 cnt1 n2 cnt2 transferred-leaves]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 633, :end-line 633, :max-fixed-arity 5, :fn-var true, :arglists (quote ([n1 cnt1 n2 cnt2 transferred-leaves]))}, Vector {:num-fields 6, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection clojure.core.rrb-vector.rrbt/AsRRBT cljs.core/IEmptyableCollection cljs.core/ICounted clojure.core.rrb-vector.protocols/PSliceableVector cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry clojure.core.rrb-vector.rrbt/Object cljs.core/IPrintWithWriter cljs.core/IComparable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative clojure.core.rrb-vector.protocols/PSpliceableVector cljs.core/ILookup cljs.core/IReduce}, :name clojure.core.rrb-vector.rrbt/Vector, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 16, :type true, :column 10, :line 268, :record false, :end-line 268, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/IPrintWithWriter cljs.core/IComparable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, rebalance {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 709, :column 7, :end-line 709, :end-column 16, :arglists (quote ([shift n1 cnt1 n2 cnt2 transferred-leaves]))}, :name clojure.core.rrb-vector.rrbt/rebalance, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 16, :method-params ([shift n1 cnt1 n2 cnt2 transferred-leaves]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 709, :end-line 709, :max-fixed-arity 6, :fn-var true, :arglists (quote ([shift n1 cnt1 n2 cnt2 transferred-leaves]))}, leaf-seq {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 630, :column 7, :end-line 630, :end-column 15, :arglists (quote ([arr]))}, :name clojure.core.rrb-vector.rrbt/leaf-seq, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 15, :method-params ([arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 630, :end-line 630, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arr]))}, PSpliceableVector {:impls (clojure.core.rrb-vector.rrbt/Vector)}, squash-nodes {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 830, :column 7, :end-line 830, :end-column 19, :arglists (quote ([shift n1 cnt1 n2 cnt2]))}, :name clojure.core.rrb-vector.rrbt/squash-nodes, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 19, :method-params ([shift n1 cnt1 n2 cnt2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 830, :end-line 830, :max-fixed-arity 5, :fn-var true, :arglists (quote ([shift n1 cnt1 n2 cnt2]))}, Transient {:num-fields 5, :protocols #{cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative}, :name clojure.core.rrb-vector.rrbt/Transient, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 19, :type true, :column 10, :line 928, :record false, :end-line 928, :skip-protocol-flag #{cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative}}, splice-rrbts {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 861, :column 7, :end-line 861, :end-column 19, :arglists (quote ([v1 v2]))}, :name clojure.core.rrb-vector.rrbt/splice-rrbts, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 19, :method-params ([v1 v2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 861, :end-line 861, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v1 v2]))}, ->Vector {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :line 268, :column 10, :end-line 268, :end-column 16, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection clojure.core.rrb-vector.rrbt/AsRRBT cljs.core/IEmptyableCollection cljs.core/ICounted clojure.core.rrb-vector.protocols/PSliceableVector cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry clojure.core.rrb-vector.rrbt/Object cljs.core/IPrintWithWriter cljs.core/IComparable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative clojure.core.rrb-vector.protocols/PSpliceableVector cljs.core/ILookup cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/IPrintWithWriter cljs.core/IComparable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :factory :positional, :arglists (quote ([cnt shift root tail meta __hash]))}, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection clojure.core.rrb-vector.rrbt/AsRRBT cljs.core/IEmptyableCollection cljs.core/ICounted clojure.core.rrb-vector.protocols/PSliceableVector cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry clojure.core.rrb-vector.rrbt/Object cljs.core/IPrintWithWriter cljs.core/IComparable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative clojure.core.rrb-vector.protocols/PSpliceableVector cljs.core/ILookup cljs.core/IReduce}, :name clojure.core.rrb-vector.rrbt/->Vector, :variadic false, :file "resources/public/js/compiled/out/clojure/core/rrb_vector/rrbt.cljs", :end-column 16, :method-params ([cnt shift root tail meta __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 268, :end-line 268, :max-fixed-arity 6, :fn-var true, :arglists (quote ([cnt shift root tail meta __hash])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/IPrintWithWriter cljs.core/IComparable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}