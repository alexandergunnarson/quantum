;; Analyzed by ClojureScript 0.0-3269
{:use-macros {whenf*n quantum.core.logic, condfc quantum.core.logic, ifn quantum.core.logic, whencf*n quantum.core.logic, <- quantum.core.function, whenc quantum.core.logic, if*n quantum.core.logic, condf*n quantum.core.logic, fn-> quantum.core.function, reducei quantum.core.loops, whenf quantum.core.logic, should-transientize? quantum.core.type, for+ quantum.core.reducers, condf quantum.core.logic, fn->> quantum.core.function}, :excludes #{remove replace re-find val}, :name quantum.core.string, :imports nil, :requires {log quantum.core.logic, quantum.core.macros quantum.core.macros, quantum.core.type quantum.core.type, num quantum.core.numeric, r quantum.core.reducers, cljs.core cljs.core, quantum.core.numeric quantum.core.numeric, fn quantum.core.function, macros quantum.core.macros, ns quantum.core.ns, quantum.core.logic quantum.core.logic, quantum.core.loops quantum.core.loops, type quantum.core.type, quantum.core.reducers quantum.core.reducers, str clojure.string, clojure.string clojure.string, quantum.core.ns quantum.core.ns, quantum.core.function quantum.core.function}, :uses {Editable quantum.core.ns, boolean? quantum.core.type, sorted-map? quantum.core.type, firsta quantum.core.function, Nil quantum.core.ns, Bool quantum.core.ns, f*n quantum.core.function, IllegalArgumentException quantum.core.ns, fn-not quantum.core.logic, Vec quantum.core.ns, nnil? quantum.core.logic, Num quantum.core.ns, double? quantum.core.type, map-entry? quantum.core.type, remove+ quantum.core.reducers, Regex quantum.core.ns, transient? quantum.core.type, regex? quantum.core.type, Key quantum.core.ns, pattern? quantum.core.type, Map quantum.core.ns, ArrList quantum.core.ns, array-list? quantum.core.type, LSeq quantum.core.ns, fn-or quantum.core.logic, coll+? quantum.core.type, Set quantum.core.ns, splice-or quantum.core.logic, editable? quantum.core.type, ExactNum quantum.core.ns, fold+ quantum.core.reducers, instance+? quantum.core.type, fn-and quantum.core.logic, fn* quantum.core.function, filter+ quantum.core.reducers, queue? quantum.core.type, compr quantum.core.function, take-while+ quantum.core.reducers, Queue quantum.core.ns, Keyword cljs.core, TreeMap quantum.core.ns, Exception quantum.core.ns, class quantum.core.type, Decimal quantum.core.ns, take+ quantum.core.reducers, map+ quantum.core.reducers, Int quantum.core.ns, lseq? quantum.core.type, nempty? quantum.core.logic, Transient quantum.core.ns, range+ quantum.core.reducers, unary quantum.core.function, reduce+ quantum.core.reducers}, :defs {ends-with? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 156, :column 7, :end-line 156, :end-column 17, :arglists (quote ([super sub])), :todo ["Protocolize"]}, :name quantum.core.string/ends-with?, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 17, :method-params ([super sub]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :todo ["Protocolize"], :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists (quote ([super sub]))}, replace-with {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 64, :column 7, :end-line 64, :end-column 19, :arglists (quote ([s m])), :doc "Replace all.", :in (quote ["and" (om "a" "abc")]), :out "abcnd"}, :name quantum.core.string/replace-with, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 19, :method-params ([s m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :out "abcnd", :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s m])), :doc "Replace all.", :in (quote ["and" (om "a" "abc")])}, camelcase {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 221, :column 7, :end-line 221, :end-column 16, :arglists (quote ([str-0 & [method?]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(str-0 [method?])], :arglists ([str-0 & [method?]]), :arglists-meta (nil)}}, :name quantum.core.string/camelcase, :variadic true, :file "src/cljc/quantum/core/string.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(str-0 [method?])], :arglists ([str-0 & [method?]]), :arglists-meta (nil)}, :method-params [(str-0 [method?])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 1, :fn-var true, :arglists ([str-0 & [method?]])}, capitalize-each-word {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 210, :column 7, :end-line 210, :end-column 27, :arglists (quote ([string]))}, :name quantum.core.string/capitalize-each-word, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 27, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string]))}, capitalize {:name quantum.core.string/capitalize, :file "src/cljc/quantum/core/string.cljc", :line 75, :column 1, :end-line 75, :end-column 16, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 75, :column 6, :end-line 75, :end-column 16}}, join {:name quantum.core.string/join, :file "src/cljc/quantum/core/string.cljc", :line 77, :column 1, :end-line 77, :end-column 10, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 77, :column 6, :end-line 77, :end-column 10}}, starts-with? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 144, :column 7, :end-line 144, :end-column 19, :arglists (quote ([super sub])), :todo ["Protocolize"]}, :name quantum.core.string/starts-with?, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 19, :method-params ([super sub]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :todo ["Protocolize"], :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([super sub]))}, join-once {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 179, :column 7, :end-line 179, :end-column 16, :arglists (quote ([separator & coll])), :doc "Like /clojure.string/join/ but ensures no double separators.", :attribution "taoensso.encore", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(separator coll)], :arglists ([separator & coll]), :arglists-meta (nil)}}, :name quantum.core.string/join-once, :variadic true, :file "src/cljc/quantum/core/string.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(separator coll)], :arglists ([separator & coll]), :arglists-meta (nil)}, :method-params [(separator coll)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 179, :attribution "taoensso.encore", :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists ([separator & coll]), :doc "Like /clojure.string/join/ but ensures no double separators."}, keywordize {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 218, :column 7, :end-line 218, :end-column 17, :arglists (quote ([kw]))}, :name quantum.core.string/keywordize, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 17, :method-params ([kw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kw]))}, replace {:name quantum.core.string/replace, :file "src/cljc/quantum/core/string.cljc", :line 62, :column 1, :end-line 62, :end-column 13, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 62, :column 6, :end-line 62, :end-column 13}}, properize-keyword {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 215, :column 6, :end-line 215, :end-column 23}, :name quantum.core.string/properize-keyword, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 23, :method-params ([x__22733__auto__]), :protocol-impl nil, :arglists-meta (), :column 1, :line 215, :end-line 215, :max-fixed-arity 1, :fn-var true, :arglists nil}, sp {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 253, :column 7, :end-line 253, :end-column 9, :arglists (quote ([& args])), :doc "Like |str|, but adds spaces between the arguments.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name quantum.core.string/sp, :variadic true, :file "src/cljc/quantum/core/string.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Like |str|, but adds spaces between the arguments."}, lower-case? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 91, :column 7, :end-line 91, :end-column 18, :arglists (quote ([c]))}, :name quantum.core.string/lower-case?, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 18, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, char+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 94, :column 7, :end-line 94, :end-column 12, :arglists (quote ([obj]))}, :name quantum.core.string/char+, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 12, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, alphabet {:name quantum.core.string/alphabet, :file "src/cljc/quantum/core/string.cljc", :line 289, :column 1, :end-line 289, :end-column 14, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 289, :column 6, :end-line 289, :end-column 14}}, remove-extra-whitespace {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 204, :column 7, :end-line 204, :end-column 30, :arglists (quote ([string-0]))}, :name quantum.core.string/remove-extra-whitespace, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 30, :method-params ([string-0]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string-0]))}, lower-case {:name quantum.core.string/lower-case, :file "src/cljc/quantum/core/string.cljc", :line 79, :column 1, :end-line 79, :end-column 16, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 79, :column 6, :end-line 79, :end-column 16}}, vowels {:name quantum.core.string/vowels, :file "src/cljc/quantum/core/string.cljc", :line 318, :column 1, :end-line 318, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 318, :column 6, :end-line 318, :end-column 12}}, subs+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 112, :column 7, :end-line 112, :end-column 12, :arglists (quote ([s start-idx & [max-len]])), :doc "Gives a consistent, flexible, cross-platform substring API with support for:\n    * Clamping of indexes beyond string limits.\n    * Negative indexes: [   0   |   1   |  ...  |  n-1  |   n   ) or\n                        [  -n   | -n+1  |  ...  |  -1   |   0).\n                        (start index inclusive, end index exclusive).\n\n  Note that `max-len` was chosen over `end-idx` since it's less ambiguous and\n  easier to reason about - esp. when accepting negative indexes.\n  From taoensso.encore.", :usage ["(subs+ \"Hello\"  0 5)" "Hello" "(subs+ \"Hello\"  0 9)" "Hello" "(subs+ \"Hello\" -4 5)" "Hello" "(subs+ \"Hello\"  2 2)" "ll" "(subs+ \"Hello\" -2 2)" "ll" "(subs+ \"Hello\" -2)  " "llo" "(subs+ \"Hello\"  2)  " "llo" "(subs+ \"Hello\"  9 9)" "" "(subs+ \"Hello\"  0 0)" ""], :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(s start-idx [max-len])], :arglists ([s start-idx & [max-len]]), :arglists-meta (nil)}}, :name quantum.core.string/subs+, :variadic true, :file "src/cljc/quantum/core/string.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(s start-idx [max-len])], :arglists ([s start-idx & [max-len]]), :arglists-meta (nil)}, :method-params [(s start-idx [max-len])], :protocol-impl nil, :arglists-meta (nil), :column 1, :usage ["(subs+ \"Hello\"  0 5)" "Hello" "(subs+ \"Hello\"  0 9)" "Hello" "(subs+ \"Hello\" -4 5)" "Hello" "(subs+ \"Hello\"  2 2)" "ll" "(subs+ \"Hello\" -2 2)" "ll" "(subs+ \"Hello\" -2)  " "llo" "(subs+ \"Hello\"  2)  " "llo" "(subs+ \"Hello\"  9 9)" "" "(subs+ \"Hello\"  0 0)" ""], :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists ([s start-idx & [max-len]]), :doc "Gives a consistent, flexible, cross-platform substring API with support for:\n    * Clamping of indexes beyond string limits.\n    * Negative indexes: [   0   |   1   |  ...  |  n-1  |   n   ) or\n                        [  -n   | -n+1  |  ...  |  -1   |   0).\n                        (start index inclusive, end index exclusive).\n\n  Note that `max-len` was chosen over `end-idx` since it's less ambiguous and\n  easier to reason about - esp. when accepting negative indexes.\n  From taoensso.encore."}, conv-regex-specials {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 98, :column 7, :end-line 98, :end-column 26, :arglists (quote ([str-0]))}, :name quantum.core.string/conv-regex-specials, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 26, :method-params ([str-0]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([str-0]))}, rand-str {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 294, :column 15, :end-line 294, :end-column 23, :tag String, :arglists (quote ([len]))}, :name quantum.core.string/rand-str, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 23, :method-params ([len]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :ret-tag String, :end-line 294, :max-fixed-arity 1, :tag String, :fn-var true, :arglists (quote ([len]))}, re-find {:name quantum.core.string/re-find, :file "src/cljc/quantum/core/string.cljc", :line 82, :column 1, :end-line 82, :end-column 13, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 82, :column 6, :end-line 82, :end-column 13}}, val {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 302, :column 7, :end-line 302, :end-column 10, :arglists (quote ([obj]))}, :name quantum.core.string/val, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 10, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, remove-from-end {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 198, :column 7, :end-line 198, :end-column 22, :arglists (quote ([string end]))}, :name quantum.core.string/remove-from-end, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 22, :method-params ([string end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 2, :fn-var true, :arglists (quote ([string end]))}, re-find+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 283, :column 7, :end-line 283, :end-column 15, :arglists (quote ([pat in-str]))}, :name quantum.core.string/re-find+, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 15, :method-params ([pat in-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 283, :end-line 283, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pat in-str]))}, un-camelcase {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 231, :column 7, :end-line 231, :end-column 19, :arglists (quote ([sym]))}, :name quantum.core.string/un-camelcase, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 19, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, paren {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 246, :column 7, :end-line 246, :end-column 12, :arglists (quote ([str-0])), :doc "Wraps a given string in parentheses.", :todo ["Protocolize"]}, :name quantum.core.string/paren, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 12, :method-params ([str-0]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :todo ["Protocolize"], :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists (quote ([str-0])), :doc "Wraps a given string in parentheses."}, re-get {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 276, :column 7, :end-line 276, :end-column 13, :arglists (quote ([regex string]))}, :name quantum.core.string/re-get, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 13, :method-params ([regex string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 2, :fn-var true, :arglists (quote ([regex string]))}, squote {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 239, :column 7, :end-line 239, :end-column 13, :arglists (quote ([str-0])), :doc "Wraps a given string in single quotes.", :todo ["Protocolize"]}, :name quantum.core.string/squote, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 13, :method-params ([str-0]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :todo ["Protocolize"], :end-line 239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([str-0])), :doc "Wraps a given string in single quotes."}, upper-case {:name quantum.core.string/upper-case, :file "src/cljc/quantum/core/string.cljc", :line 78, :column 1, :end-line 78, :end-column 16, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 78, :column 6, :end-line 78, :end-column 16}}, str-nil {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 87, :column 7, :end-line 87, :end-column 14}, :name quantum.core.string/str-nil, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 14, :method-params ([arg__22921__auto__]), :protocol-impl nil, :arglists-meta (), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists nil}, keyword+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 336, :column 7, :end-line 336, :end-column 15, :arglists (quote ([obj] [obj & objs])), :doc "Like |str| but for keywords.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([obj]), :arglists ([obj] [obj & objs]), :arglists-meta (nil nil)}}, :name quantum.core.string/keyword+, :variadic true, :file "src/cljc/quantum/core/string.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([obj]), :arglists ([obj] [obj & objs]), :arglists-meta (nil nil)}, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 336, :end-line 336, :max-fixed-arity 1, :fn-var true, :arglists ([obj] [obj & objs]), :doc "Like |str| but for keywords."}, split {:name quantum.core.string/split, :file "src/cljc/quantum/core/string.cljc", :line 76, :column 1, :end-line 76, :end-column 11, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 76, :column 6, :end-line 76, :end-column 11}}, trimr {:name quantum.core.string/trimr, :file "src/cljc/quantum/core/string.cljc", :line 81, :column 1, :end-line 81, :end-column 11, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 81, :column 6, :end-line 81, :end-column 11}}, sp-comma {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 263, :column 7, :end-line 263, :end-column 15, :arglists (quote ([& args])), :doc "Like |sp|, but adds commas and spaces between the arguments.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name quantum.core.string/sp-comma, :variadic true, :file "src/cljc/quantum/core/string.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Like |sp|, but adds commas and spaces between the arguments."}, triml {:name quantum.core.string/triml, :file "src/cljc/quantum/core/string.cljc", :line 80, :column 1, :end-line 80, :end-column 11, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 80, :column 6, :end-line 80, :end-column 11}}, upper-case? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 88, :column 7, :end-line 88, :end-column 18, :arglists (quote ([c]))}, :name quantum.core.string/upper-case?, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 18, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, remove-all {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 166, :column 7, :end-line 166, :end-column 17, :arglists (quote ([str-0 to-remove]))}, :name quantum.core.string/remove-all, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 17, :method-params ([str-0 to-remove]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 2, :fn-var true, :arglists (quote ([str-0 to-remove]))}, blank? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/string.cljc", :line 83, :column 7, :end-line 83, :end-column 13, :arglists (quote ([obj])), :doc "Determines if an object @obj is a blank/empty string."}, :name quantum.core.string/blank?, :variadic false, :file "src/cljc/quantum/core/string.cljc", :end-column 13, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Determines if an object @obj is a blank/empty string."}}, :require-macros {fn quantum.core.function, quantum.core.function quantum.core.function, log quantum.core.logic, quantum.core.logic quantum.core.logic, r quantum.core.reducers, quantum.core.reducers quantum.core.reducers, type quantum.core.type, quantum.core.type quantum.core.type, quantum.core.loops quantum.core.loops}, :cljs.analyzer/constants {:seen #{:else :attribution}, :order [:attribution :else]}, :doc "Useful string utils. Aliases clojure.string.\n\n          Includes squote (single-quote), sp (spaced),\n          val (reading a number of a string), keyword+\n          (for joining strings and keywords into one\n          keyword), etc."}