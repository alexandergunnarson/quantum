;; Analyzed by ClojureScript 0.0-3269
{:use-macros {<- quantum.core.function, fn-> quantum.core.function, fn->> quantum.core.function}, :excludes #{}, :name quantum.core.logic, :imports nil, :requires {ns quantum.core.ns, quantum.core.ns quantum.core.ns, fn quantum.core.function, quantum.core.function quantum.core.function}, :uses {Editable quantum.core.ns, Nil quantum.core.ns, Bool quantum.core.ns, f*n quantum.core.function, IllegalArgumentException quantum.core.ns, Vec quantum.core.ns, Num quantum.core.ns, Regex quantum.core.ns, Key quantum.core.ns, Map quantum.core.ns, ArrList quantum.core.ns, LSeq quantum.core.ns, Set quantum.core.ns, ExactNum quantum.core.ns, fn* quantum.core.function, compr quantum.core.function, Queue quantum.core.ns, TreeMap quantum.core.ns, Exception quantum.core.ns, Decimal quantum.core.ns, Int quantum.core.ns, Transient quantum.core.ns, unary quantum.core.function}, :defs {bool {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 80, :column 7, :end-line 80, :end-column 11, :arglists (quote ([v]))}, :name quantum.core.logic/bool, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, rcompare {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 86, :column 7, :end-line 86, :end-column 15, :arglists (quote ([x y])), :doc "Reverse comparator.", :attribution "taoensso.encore"}, :name quantum.core.logic/rcompare, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 15, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :attribution "taoensso.encore", :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "Reverse comparator."}, any? {:name quantum.core.logic/any?, :file "src/cljc/quantum/core/logic.cljc", :line 48, :column 1, :end-line 48, :end-column 10, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 48, :column 6, :end-line 48, :end-column 10}}, is? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 192, :column 6, :end-line 192, :end-column 9}, :name quantum.core.logic/is?, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 9, :method-params ([p1__22831# p2__22832#]), :protocol-impl nil, :arglists-meta (), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists nil}, fn-pred-and {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 69, :column 7, :end-line 69, :end-column 18, :arglists (quote ([pred-fn args]))}, :name quantum.core.logic/fn-pred-and, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 18, :method-params ([pred-fn args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred-fn args]))}, splice-and {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 65, :column 7, :end-line 65, :end-column 17, :arglists (quote ([obj compare-fn & coll])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(obj compare-fn coll)], :arglists ([obj compare-fn & coll]), :arglists-meta (nil)}}, :name quantum.core.logic/splice-and, :variadic true, :file "src/cljc/quantum/core/logic.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(obj compare-fn coll)], :arglists ([obj compare-fn & coll]), :arglists-meta (nil)}, :method-params [(obj compare-fn coll)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists ([obj compare-fn & coll])}, fn-pred-or {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 67, :column 7, :end-line 67, :end-column 17, :arglists (quote ([pred-fn args]))}, :name quantum.core.logic/fn-pred-or, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 17, :method-params ([pred-fn args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred-fn args]))}, pred-and {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 58, :column 7, :end-line 58, :end-column 15, :arglists (quote ([pred obj args]))}, :name quantum.core.logic/pred-and, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 15, :method-params ([pred obj args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred obj args]))}, coll-and {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 74, :column 7, :end-line 74, :end-column 15, :arglists (quote ([& elems])), :usage "((and-coll 1 2 3) < 0) => true (0 is less than 1, 2, and 3)", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(elems)], :arglists ([& elems]), :arglists-meta (nil)}}, :name quantum.core.logic/coll-and, :variadic true, :file "src/cljc/quantum/core/logic.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(elems)], :arglists ([& elems]), :arglists-meta (nil)}, :method-params [(elems)], :protocol-impl nil, :arglists-meta (nil), :column 1, :usage "((and-coll 1 2 3) < 0) => true (0 is less than 1, 2, and 3)", :line 74, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists ([& elems])}, fn-not {:name quantum.core.logic/fn-not, :file "src/cljc/quantum/core/logic.cljc", :line 62, :column 1, :end-line 62, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 62, :column 6, :end-line 62, :end-column 12}}, nnil? {:name quantum.core.logic/nnil?, :file "src/cljc/quantum/core/logic.cljc", :line 34, :column 1, :end-line 34, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 34, :column 7, :end-line 34, :end-column 12}}, neq? {:name quantum.core.logic/neq?, :file "src/cljc/quantum/core/logic.cljc", :line 46, :column 1, :end-line 46, :end-column 10, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 46, :column 6, :end-line 46, :end-column 10}}, pred-or {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 56, :column 7, :end-line 56, :end-column 14, :arglists (quote ([pred obj args]))}, :name quantum.core.logic/pred-or, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 14, :method-params ([pred obj args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred obj args]))}, fn-or {:name quantum.core.logic/fn-or, :file "src/cljc/quantum/core/logic.cljc", :line 61, :column 1, :end-line 61, :end-column 11, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 61, :column 6, :end-line 61, :end-column 11}}, splice-or {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 63, :column 7, :end-line 63, :end-column 16, :arglists (quote ([obj compare-fn & coll])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(obj compare-fn coll)], :arglists ([obj compare-fn & coll]), :arglists-meta (nil)}}, :name quantum.core.logic/splice-or, :variadic true, :file "src/cljc/quantum/core/logic.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(obj compare-fn coll)], :arglists ([obj compare-fn & coll]), :arglists-meta (nil)}, :method-params [(obj compare-fn coll)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists ([obj compare-fn & coll])}, fn-eq? {:name quantum.core.logic/fn-eq?, :file "src/cljc/quantum/core/logic.cljc", :line 45, :column 1, :end-line 45, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 45, :column 6, :end-line 45, :end-column 12}}, coll-or {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 71, :column 7, :end-line 71, :end-column 14, :arglists (quote ([& elems])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(elems)], :arglists ([& elems]), :arglists-meta (nil)}}, :name quantum.core.logic/coll-or, :variadic true, :file "src/cljc/quantum/core/logic.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(elems)], :arglists ([& elems]), :arglists-meta (nil)}, :method-params [(elems)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 0, :fn-var true, :arglists ([& elems])}, apply-or {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 51, :column 7, :end-line 51, :end-column 15, :arglists (quote ([arg-list]))}, :name quantum.core.logic/apply-or, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 15, :method-params ([arg-list]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg-list]))}, empty+? {:name quantum.core.logic/empty+?, :file "src/cljc/quantum/core/logic.cljc", :line 79, :column 1, :end-line 79, :end-column 14, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 79, :column 7, :end-line 79, :end-column 14}}, fn-and {:name quantum.core.logic/fn-and, :file "src/cljc/quantum/core/logic.cljc", :line 60, :column 1, :end-line 60, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 60, :column 6, :end-line 60, :end-column 12}}, apply-and {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 49, :column 7, :end-line 49, :end-column 16, :arglists (quote ([arg-list]))}, :name quantum.core.logic/apply-and, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 16, :method-params ([arg-list]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg-list]))}, fn= {:name quantum.core.logic/fn=, :file "src/cljc/quantum/core/logic.cljc", :line 44, :column 1, :end-line 44, :end-column 9, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 44, :column 6, :end-line 44, :end-column 9}}, fn-neq? {:name quantum.core.logic/fn-neq?, :file "src/cljc/quantum/core/logic.cljc", :line 47, :column 1, :end-line 47, :end-column 13, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 47, :column 6, :end-line 47, :end-column 13}}, iff {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 37, :column 7, :end-line 37, :end-column 10, :arglists (quote ([pred const else]))}, :name quantum.core.logic/iff, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 10, :method-params ([pred const else]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred const else]))}, iffn {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 39, :column 7, :end-line 39, :end-column 11, :arglists (quote ([pred const else-fn]))}, :name quantum.core.logic/iffn, :variadic false, :file "src/cljc/quantum/core/logic.cljc", :end-column 11, :method-params ([pred const else-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred const else-fn]))}, eq? {:name quantum.core.logic/eq?, :file "src/cljc/quantum/core/logic.cljc", :line 43, :column 1, :end-line 43, :end-column 9, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 43, :column 6, :end-line 43, :end-column 9}}, dor {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 53, :column 7, :end-line 53, :end-column 10, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name quantum.core.logic/dor, :variadic true, :file "src/cljc/quantum/core/logic.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, nempty? {:name quantum.core.logic/nempty?, :file "src/cljc/quantum/core/logic.cljc", :line 35, :column 1, :end-line 35, :end-column 14, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 35, :column 7, :end-line 35, :end-column 14}}, nseq? {:name quantum.core.logic/nseq?, :file "src/cljc/quantum/core/logic.cljc", :line 36, :column 1, :end-line 36, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/logic.cljc", :line 36, :column 7, :end-line 36, :end-column 12}}}, :require-macros {fn quantum.core.function, quantum.core.function quantum.core.function}, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc "Logic-related functions. nnil?, nempty?, fn-not, fn-and, splice-or,\n          ifn, whenf*n, compr, fn->, condpc, and the like. Extremely useful\n          and used everywhere in the quantum library."}