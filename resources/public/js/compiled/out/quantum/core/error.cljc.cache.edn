;; Analyzed by ClojureScript 0.0-3269
{:use-macros nil, :excludes #{}, :name quantum.core.error, :imports nil, :requires {ns quantum.core.ns, quantum.core.ns quantum.core.ns}, :uses {Editable quantum.core.ns, Nil quantum.core.ns, Bool quantum.core.ns, IllegalArgumentException quantum.core.ns, Vec quantum.core.ns, Num quantum.core.ns, Regex quantum.core.ns, Key quantum.core.ns, Map quantum.core.ns, ArrList quantum.core.ns, LSeq quantum.core.ns, Set quantum.core.ns, ExactNum quantum.core.ns, Queue quantum.core.ns, TreeMap quantum.core.ns, Exception quantum.core.ns, Decimal quantum.core.ns, Int quantum.core.ns, Transient quantum.core.ns}, :defs {throw+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/error.cljc", :line 30, :column 16, :end-line 30, :end-column 22, :arglists (quote ([err]))}, :name quantum.core.error/throw+, :variadic false, :file "src/cljc/quantum/core/error.cljc", :end-column 22, :method-params ([err]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([err]))}, with-throw {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/error.cljc", :line 43, :column 7, :end-line 43, :end-column 17, :arglists (quote ([expr throw-content])), :doc "Throws an exception with the given message @message if\n   @expr evaluates to false.\n\n   Specifically for use with :pre and :post conditions.", :attribution "Alex Gunnarson"}, :name quantum.core.error/with-throw, :variadic false, :file "src/cljc/quantum/core/error.cljc", :end-column 17, :method-params ([expr throw-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :attribution "Alex Gunnarson", :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([expr throw-content])), :doc "Throws an exception with the given message @message if\n   @expr evaluates to false.\n\n   Specifically for use with :pre and :post conditions."}, unk-dispatch {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/error.cljc", :line 74, :column 7, :end-line 74, :end-column 19, :arglists (quote ([dispatch]))}, :name quantum.core.error/unk-dispatch, :variadic false, :file "src/cljc/quantum/core/error.cljc", :end-column 19, :method-params ([dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dispatch]))}, unk-key {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/error.cljc", :line 77, :column 7, :end-line 77, :end-column 14, :arglists (quote ([k]))}, :name quantum.core.error/unk-key, :variadic false, :file "src/cljc/quantum/core/error.cljc", :end-column 14, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:unk-key :type :unk-dispatch :message}, :order [:type :message :unk-dispatch :unk-key]}, :doc "Error handling. Improved try/catch, and built-in error types for convenience's sake."}