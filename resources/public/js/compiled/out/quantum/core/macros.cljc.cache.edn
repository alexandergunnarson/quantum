;; Analyzed by ClojureScript 0.0-3269
{:use-macros {should-transientize? quantum.core.type}, :excludes #{}, :name quantum.core.macros, :imports nil, :requires {ns quantum.core.ns, quantum.core.ns quantum.core.ns, type quantum.core.type, quantum.core.type quantum.core.type}, :uses {Editable quantum.core.ns, boolean? quantum.core.type, sorted-map? quantum.core.type, Nil quantum.core.ns, Bool quantum.core.ns, IllegalArgumentException quantum.core.ns, Vec quantum.core.ns, Num quantum.core.ns, double? quantum.core.type, map-entry? quantum.core.type, Regex quantum.core.ns, transient? quantum.core.type, regex? quantum.core.type, Key quantum.core.ns, pattern? quantum.core.type, Map quantum.core.ns, ArrList quantum.core.ns, array-list? quantum.core.type, LSeq quantum.core.ns, coll+? quantum.core.type, Set quantum.core.ns, editable? quantum.core.type, ExactNum quantum.core.ns, instance+? quantum.core.type, queue? quantum.core.type, Queue quantum.core.ns, TreeMap quantum.core.ns, Exception quantum.core.ns, class quantum.core.type, Decimal quantum.core.ns, Int quantum.core.ns, lseq? quantum.core.type, Transient quantum.core.ns}, :defs {emit-comprehension {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/macros.cljc", :line 60, :column 7, :end-line 60, :end-column 25, :arglists (quote ([seq-exprs body-expr])), :attribution "clojure.core, via Christophe Grand - https://gist.github.com/cgrand/5643767", :todo ["Transientize the |reduce|s"]}, :name quantum.core.macros/emit-comprehension, :variadic false, :file "src/cljc/quantum/core/macros.cljc", :end-column 25, :method-params ([&form p__23038 seq-exprs body-expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :attribution "clojure.core, via Christophe Grand - https://gist.github.com/cgrand/5643767", :todo ["Transientize the |reduce|s"], :end-line 60, :max-fixed-arity 4, :fn-var true, :arglists (quote ([seq-exprs body-expr]))}, do-mod {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/macros.cljc", :line 76, :column 7, :end-line 76, :end-column 13, :arglists (quote ([mod-pairs cont & {:keys [skip stop]}])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(mod-pairs cont {:keys [skip stop]})], :arglists ([mod-pairs cont & {:keys [skip stop]}]), :arglists-meta (nil)}}, :name quantum.core.macros/do-mod, :variadic true, :file "src/cljc/quantum/core/macros.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(mod-pairs cont {:keys [skip stop]})], :arglists ([mod-pairs cont & {:keys [skip stop]}]), :arglists-meta (nil)}, :method-params [(mod-pairs cont {:keys [skip stop]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists ([mod-pairs cont & {:keys [skip stop]}])}}, :require-macros {quantum.core.type quantum.core.type}, :cljs.analyzer/constants {:seen #{:let :emit-inner :emit-other :else :when :stop :while :skip}, :order [:emit-other :emit-inner :skip :stop :let :while :when :else]}, :doc "Some useful macros, like de-repetitivizing protocol extensions.\n          Also some plumbing macros for |for| loops and the like."}