;; Analyzed by ClojureScript 0.0-3269
{:name quantum.core.collections.core, :doc "Retakes on core collections functions like first, rest,\n          get, nth, last, index-of, etc.\n\n          Also includes innovative functions like getr, etc.", :excludes #{}, :use-macros {whenf*n quantum.core.logic, condfc quantum.core.logic, ifn quantum.core.logic, whencf*n quantum.core.logic, <- quantum.core.function, whenc quantum.core.logic, if*n quantum.core.logic, condf*n quantum.core.logic, fn-> quantum.core.function, extend-protocol-types quantum.core.macros, extend-protocol-for-all quantum.core.macros, whenf quantum.core.logic, extend-protocol-type quantum.core.macros, should-transientize? quantum.core.type, for+ quantum.core.reducers, condf quantum.core.logic, fn->> quantum.core.function}, :require-macros {fn quantum.core.function, quantum.core.function quantum.core.function, log quantum.core.logic, quantum.core.logic quantum.core.logic, red quantum.core.reducers, quantum.core.reducers quantum.core.reducers, type quantum.core.type, quantum.core.type quantum.core.type, quantum.core.macros quantum.core.macros}, :uses {Editable quantum.core.ns, drop+ quantum.core.reducers, boolean? quantum.core.type, sorted-map? quantum.core.type, firsta quantum.core.function, Nil quantum.core.ns, Bool quantum.core.ns, f*n quantum.core.function, IllegalArgumentException quantum.core.ns, fn-not quantum.core.logic, catvec quantum.core.data.vector, Vec quantum.core.ns, nnil? quantum.core.logic, Num quantum.core.ns, double? quantum.core.type, map-entry? quantum.core.type, remove+ quantum.core.reducers, Regex quantum.core.ns, transient? quantum.core.type, regex? quantum.core.type, Key quantum.core.ns, pattern? quantum.core.type, subvec+ quantum.core.data.vector, Map quantum.core.ns, ArrList quantum.core.ns, name-from-class quantum.core.type, array-list? quantum.core.type, LSeq quantum.core.ns, fn-or quantum.core.logic, coll+? quantum.core.type, Set quantum.core.ns, splice-or quantum.core.logic, editable? quantum.core.type, ExactNum quantum.core.ns, vector+ quantum.core.data.vector, fold+ quantum.core.reducers, instance+? quantum.core.type, fn-and quantum.core.logic, fn* quantum.core.function, filter+ quantum.core.reducers, queue? quantum.core.type, compr quantum.core.function, take-while+ quantum.core.reducers, Queue quantum.core.ns, TreeMap quantum.core.ns, Exception quantum.core.ns, class quantum.core.type, Decimal quantum.core.ns, take+ quantum.core.reducers, map+ quantum.core.reducers, Int quantum.core.ns, lseq? quantum.core.type, nempty? quantum.core.logic, Transient quantum.core.ns, range+ quantum.core.reducers, unary quantum.core.function, reduce+ quantum.core.reducers}, :requires {set quantum.core.data.set, log quantum.core.logic, quantum.core.macros quantum.core.macros, quantum.core.type quantum.core.type, fn quantum.core.function, vec quantum.core.data.vector, ns quantum.core.ns, quantum.core.data.vector quantum.core.data.vector, quantum.core.logic quantum.core.logic, type quantum.core.type, quantum.core.reducers quantum.core.reducers, quantum.core.data.set quantum.core.data.set, str quantum.core.string, red quantum.core.reducers, quantum.core.string quantum.core.string, quantum.core.error quantum.core.error, quantum.core.ns quantum.core.ns, quantum.core.function quantum.core.function}, :imports nil, :defs {third {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 315, :column 7, :end-line 315, :end-column 12, :arglists (quote ([coll]))}, :name quantum.core.collections.core/third, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 12, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 315, :end-line 315, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, second+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 108, :column 4, :end-line 108, :end-column 11, :protocol quantum.core.collections.core/CollRetrieve, :doc nil, :arglists (quote ([coll]))}, :protocol quantum.core.collections.core/CollRetrieve, :name quantum.core.collections.core/second+, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 11, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc nil}, pop+ {:name quantum.core.collections.core/pop+, :file "src/cljc/quantum/core/collections/core.cljc", :line 283, :column 1, :end-line 283, :end-column 11, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 283, :column 7, :end-line 283, :end-column 11}}, lasti {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 66, :column 7, :end-line 66, :end-column 12, :arglists (quote ([coll])), :doc "Last index of a coll."}, :name quantum.core.collections.core/lasti, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 12, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Last index of a coll."}, popr+ {:name quantum.core.collections.core/popr+, :file "src/cljc/quantum/core/collections/core.cljc", :line 284, :column 1, :end-line 284, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 284, :column 7, :end-line 284, :end-column 12}}, last-index-of+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 294, :column 4, :end-line 294, :end-column 18, :protocol quantum.core.collections.core/CollSearch, :doc nil, :arglists (quote ([coll elem]))}, :protocol quantum.core.collections.core/CollSearch, :name quantum.core.collections.core/last-index-of+, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 18, :method-params ([coll elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 292, :end-line 294, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll elem])), :doc nil}, popl+ {:name quantum.core.collections.core/popl+, :file "src/cljc/quantum/core/collections/core.cljc", :line 285, :column 1, :end-line 285, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 285, :column 7, :end-line 285, :end-column 12}}, index-of+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 293, :column 4, :end-line 293, :end-column 13, :protocol quantum.core.collections.core/CollSearch, :doc nil, :arglists (quote ([coll elem]))}, :protocol quantum.core.collections.core/CollSearch, :name quantum.core.collections.core/index-of+, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 13, :method-params ([coll elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 292, :end-line 293, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll elem])), :doc nil}, conjl- {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 324, :column 4, :end-line 324, :end-column 10, :protocol quantum.core.collections.core/CollMod, :doc nil, :arglists (quote ([coll args]))}, :protocol quantum.core.collections.core/CollMod, :name quantum.core.collections.core/conjl-, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 10, :method-params ([coll args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 324, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll args])), :doc nil}, doto! {:name quantum.core.collections.core/doto!, :file "src/cljc/quantum/core/collections/core.cljc", :line 373, :column 1, :end-line 373, :end-column 11, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 373, :column 6, :end-line 373, :end-column 11}}, butlast+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 110, :column 4, :end-line 110, :end-column 12, :protocol quantum.core.collections.core/CollRetrieve, :doc nil, :arglists (quote ([coll]))}, :protocol quantum.core.collections.core/CollRetrieve, :name quantum.core.collections.core/butlast+, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 12, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc nil}, conjl {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 370, :column 6, :end-line 370, :end-column 11}, :name quantum.core.collections.core/conjl, :variadic true, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 11, :method-params ([coll args]), :protocol-impl nil, :arglists-meta (), :column 1, :line 370, :end-line 370, :max-fixed-arity 1, :fn-var true, :arglists nil}, conjr {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 371, :column 6, :end-line 371, :end-column 11}, :name quantum.core.collections.core/conjr, :variadic true, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 11, :method-params ([coll args]), :protocol-impl nil, :arglists-meta (), :column 1, :line 371, :end-line 371, :max-fixed-arity 1, :fn-var true, :arglists nil}, CollRetrieve {:meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 104, :column 14, :end-line 104, :end-column 26, :doc nil, :protocol-symbol true, :protocol-info {:methods {getr+ [[coll a] [coll a b]], get+ [[coll n] [coll n if-not-found]], first+ [[coll]], second+ [[coll]], rest+ [[coll]], butlast+ [[coll]], last+ [[coll]]}}}, :protocol-symbol true, :name quantum.core.collections.core/CollRetrieve, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 26, :column 1, :line 104, :protocol-info {:methods {getr+ [[coll a] [coll a b]], get+ [[coll n] [coll n if-not-found]], first+ [[coll]], second+ [[coll]], rest+ [[coll]], butlast+ [[coll]], last+ [[coll]]}}, :info nil, :end-line 104, :impls #{nil cljs.core/Keyword cljs.core/EmptyList cljs.core/Delay default string}, :doc nil}, conjl-list {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 327, :column 8, :end-line 327, :end-column 18, :private true, :arglists (quote ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f])), :todo ["Add var-args"], :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f]), :arglists ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f]), :arglists-meta (nil nil nil nil nil nil)}}, :private true, :name quantum.core.collections.core/conjl-list, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f]), :arglists ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f]), :arglists-meta (nil nil nil nil nil nil)}, :method-params ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column 1, :line 327, :todo ["Add var-args"], :end-line 327, :max-fixed-arity 7, :fn-var true, :arglists ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f])}, gets+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 271, :column 7, :end-line 271, :end-column 12, :arglists (quote ([coll & indices])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(coll indices)], :arglists ([coll & indices]), :arglists-meta (nil)}}, :name quantum.core.collections.core/gets+, :variadic true, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(coll indices)], :arglists ([coll & indices]), :arglists-meta (nil)}, :method-params [(coll indices)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 1, :fn-var true, :arglists ([coll & indices])}, getr+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 105, :column 4, :end-line 105, :end-column 9, :protocol quantum.core.collections.core/CollRetrieve, :doc "Get range", :arglists (quote ([coll a] [coll a b])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll a] [coll a b]), :arglists ([coll a] [coll a b]), :arglists-meta (nil nil)}}, :protocol quantum.core.collections.core/CollRetrieve, :name quantum.core.collections.core/getr+, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll a] [coll a b]), :arglists ([coll a] [coll a b]), :arglists-meta (nil nil)}, :method-params ([coll a] [coll a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 105, :max-fixed-arity 3, :fn-var true, :arglists ([coll a] [coll a b]), :doc "Get range"}, first+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 107, :column 4, :end-line 107, :end-column 10, :protocol quantum.core.collections.core/CollRetrieve, :doc nil, :arglists (quote ([coll]))}, :protocol quantum.core.collections.core/CollRetrieve, :name quantum.core.collections.core/first+, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 10, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc nil}, conjl-vec {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 344, :column 8, :end-line 344, :end-column 17, :private true, :arglists (quote ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f] [coll a b c d e f & args])), :top-fn {:variadic true, :max-fixed-arity 7, :method-params ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f]), :arglists ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f] [coll a b c d e f & args]), :arglists-meta (nil nil nil nil nil nil nil)}}, :private true, :name quantum.core.collections.core/conjl-vec, :variadic true, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 7, :method-params ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f]), :arglists ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f] [coll a b c d e f & args]), :arglists-meta (nil nil nil nil nil nil nil)}, :method-params ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 7, :fn-var true, :arglists ([coll a] [coll a b] [coll a b c] [coll a b c d] [coll a b c d e] [coll a b c d e f] [coll a b c d e f & args])}, CollCount {:meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 72, :column 3, :end-line 72, :end-column 12, :doc nil, :protocol-symbol true, :protocol-info {:methods {count+ [[coll]]}}}, :protocol-symbol true, :name quantum.core.collections.core/CollCount, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 12, :column 1, :line 71, :protocol-info {:methods {count+ [[coll]]}}, :info nil, :end-line 72, :impls #{nil default}, :doc nil}, count+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 73, :column 4, :end-line 73, :end-column 10, :protocol quantum.core.collections.core/CollCount, :doc nil, :arglists (quote ([coll]))}, :protocol quantum.core.collections.core/CollCount, :name quantum.core.collections.core/count+, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 10, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc nil}, CollSearch {:meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 292, :column 14, :end-line 292, :end-column 24, :doc nil, :protocol-symbol true, :protocol-info {:methods {index-of+ [[coll elem]], last-index-of+ [[coll elem]]}}}, :protocol-symbol true, :name quantum.core.collections.core/CollSearch, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 24, :column 1, :line 292, :protocol-info {:methods {index-of+ [[coll elem]], last-index-of+ [[coll elem]]}}, :info nil, :end-line 292, :impls #{string}, :doc nil}, getf+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 288, :column 7, :end-line 288, :end-column 12, :arglists (quote ([n]))}, :name quantum.core.collections.core/getf+, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 12, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, rest+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 109, :column 4, :end-line 109, :end-column 9, :protocol quantum.core.collections.core/CollRetrieve, :doc nil, :arglists (quote ([coll]))}, :protocol quantum.core.collections.core/CollRetrieve, :name quantum.core.collections.core/rest+, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 9, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc nil}, conjr- {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 325, :column 4, :end-line 325, :end-column 10, :protocol quantum.core.collections.core/CollMod, :doc nil, :arglists (quote ([coll args]))}, :protocol quantum.core.collections.core/CollMod, :name quantum.core.collections.core/conjr-, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 10, :method-params ([coll args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 325, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll args])), :doc nil}, CollMod {:meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 323, :column 14, :end-line 323, :end-column 21, :doc nil, :protocol-symbol true, :protocol-info {:methods {conjl- [[coll args]], conjr- [[coll args]]}}}, :protocol-symbol true, :name quantum.core.collections.core/CollMod, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 21, :column 1, :line 323, :protocol-info {:methods {conjl- [[coll args]], conjr- [[coll args]]}}, :info nil, :end-line 323, :impls #{}, :doc nil}, peek+ {:name quantum.core.collections.core/peek+, :file "src/cljc/quantum/core/collections/core.cljc", :line 286, :column 1, :end-line 286, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 286, :column 7, :end-line 286, :end-column 12}}, get+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 106, :column 4, :end-line 106, :end-column 8, :protocol quantum.core.collections.core/CollRetrieve, :doc nil, :arglists (quote ([coll n] [coll n if-not-found])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll n] [coll n if-not-found]), :arglists ([coll n] [coll n if-not-found]), :arglists-meta (nil nil)}}, :protocol quantum.core.collections.core/CollRetrieve, :name quantum.core.collections.core/get+, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll n] [coll n if-not-found]), :arglists ([coll n] [coll n if-not-found]), :arglists-meta (nil nil)}, :method-params ([coll n] [coll n if-not-found]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 106, :max-fixed-arity 3, :fn-var true, :arglists ([coll n] [coll n if-not-found]), :doc nil}, last+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/collections/core.cljc", :line 111, :column 4, :end-line 111, :end-column 9, :protocol quantum.core.collections.core/CollRetrieve, :doc nil, :arglists (quote ([coll]))}, :protocol quantum.core.collections.core/CollRetrieve, :name quantum.core.collections.core/last+, :variadic false, :file "src/cljc/quantum/core/collections/core.cljc", :end-column 9, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc nil}}}