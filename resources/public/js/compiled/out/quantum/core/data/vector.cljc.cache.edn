;; Analyzed by ClojureScript 0.0-3269
{:use-macros nil, :excludes #{}, :name quantum.core.data.vector, :imports nil, :requires {ns quantum.core.ns, quantum.core.ns quantum.core.ns, type quantum.core.type, quantum.core.type quantum.core.type, vec+ clojure.core.rrb-vector, clojure.core.rrb-vector clojure.core.rrb-vector, clojure.core.rrb-vector.rrbt clojure.core.rrb-vector.rrbt}, :uses {Editable quantum.core.ns, Nil quantum.core.ns, Bool quantum.core.ns, IllegalArgumentException quantum.core.ns, Vec quantum.core.ns, Num quantum.core.ns, Regex quantum.core.ns, Key quantum.core.ns, Map quantum.core.ns, ArrList quantum.core.ns, LSeq quantum.core.ns, Set quantum.core.ns, ExactNum quantum.core.ns, instance+? quantum.core.type, Queue quantum.core.ns, TreeMap quantum.core.ns, Exception quantum.core.ns, Decimal quantum.core.ns, Int quantum.core.ns, Transient quantum.core.ns}, :defs {catvec {:name quantum.core.data.vector/catvec, :file "src/cljc/quantum/core/data/vector.cljc", :line 29, :column 1, :end-line 29, :end-column 12, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/data/vector.cljc", :line 29, :column 6, :end-line 29, :end-column 12}}, vec+ {:name quantum.core.data.vector/vec+, :file "src/cljc/quantum/core/data/vector.cljc", :line 30, :column 1, :end-line 30, :end-column 10, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/data/vector.cljc", :line 30, :column 6, :end-line 30, :end-column 10}}, vector+ {:name quantum.core.data.vector/vector+, :file "src/cljc/quantum/core/data/vector.cljc", :line 31, :column 1, :end-line 31, :end-column 13, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/data/vector.cljc", :line 31, :column 6, :end-line 31, :end-column 13}}, subvec+ {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/data/vector.cljc", :line 33, :column 7, :end-line 33, :end-column 14, :arglists (quote ([coll a b])), :doc "Produces a new vector containing the appropriate subrange of the input vector in logarithmic time\n   (in contrast to clojure.core/subvec, which returns a reference to the input vector)\n   clojure.core/subvec is a constant-time operation that prevents the underlying vector\n   from becoming eligible for garbage collection", :attribution "Alex Gunnarson"}, :name quantum.core.data.vector/subvec+, :variadic false, :file "src/cljc/quantum/core/data/vector.cljc", :end-column 14, :method-params ([coll a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :attribution "Alex Gunnarson", :end-line 33, :max-fixed-arity 3, :fn-var true, :arglists (quote ([coll a b])), :doc "Produces a new vector containing the appropriate subrange of the input vector in logarithmic time\n   (in contrast to clojure.core/subvec, which returns a reference to the input vector)\n   clojure.core/subvec is a constant-time operation that prevents the underlying vector\n   from becoming eligible for garbage collection"}, vector+? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/data/vector.cljc", :line 47, :column 7, :end-line 47, :end-column 15, :arglists (quote ([obj]))}, :name quantum.core.data.vector/vector+?, :variadic false, :file "src/cljc/quantum/core/data/vector.cljc", :end-column 15, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, conjl {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/data/vector.cljc", :line 52, :column 7, :end-line 52, :end-column 12, :arglists (quote ([vec-0 elem] [vec-0 elem & elems])), :attribution "Alex Gunnarson", :todo ["Add support for conjl with other data structures." "This shouldn't go in this namespace."], :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([vec-0 elem]), :arglists ([vec-0 elem] [vec-0 elem & elems]), :arglists-meta (nil nil)}}, :name quantum.core.data.vector/conjl, :variadic true, :file "src/cljc/quantum/core/data/vector.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([vec-0 elem]), :arglists ([vec-0 elem] [vec-0 elem & elems]), :arglists-meta (nil nil)}, :method-params ([vec-0 elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :attribution "Alex Gunnarson", :todo ["Add support for conjl with other data structures." "This shouldn't go in this namespace."], :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists ([vec-0 elem] [vec-0 elem & elems])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc "Vector operations. Includes relaxed radix-balanced vectors (RRB vectors)\n          my Michal Marczyk. Also includes |conjl| (for now)."}