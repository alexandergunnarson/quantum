;; Analyzed by ClojureScript 0.0-3269
{:use-macros {whenf*n quantum.core.logic, ifn quantum.core.logic, whencf*n quantum.core.logic, <- quantum.core.function, whenc quantum.core.logic, if*n quantum.core.logic, condf*n quantum.core.logic, fn-> quantum.core.function, whenf quantum.core.logic, condf quantum.core.logic, fn->> quantum.core.function}, :excludes #{seq? vector? char? set? map? string? associative? keyword? nil? list? coll?}, :name quantum.core.type, :imports nil, :requires {set quantum.core.data.set, log quantum.core.logic, cljs.core cljs.core, fn quantum.core.function, ns quantum.core.ns, quantum.core.logic quantum.core.logic, quantum.core.data.set quantum.core.data.set, quantum.core.ns quantum.core.ns, core cljs.core, quantum.core.function quantum.core.function}, :uses {AMap quantum.core.ns, Editable quantum.core.ns, AArrList quantum.core.ns, Nil quantum.core.ns, Bool quantum.core.ns, ABool quantum.core.ns, f*n quantum.core.function, ATreeMap quantum.core.ns, IllegalArgumentException quantum.core.ns, fn-not quantum.core.logic, ASet quantum.core.ns, Vec quantum.core.ns, ALSeq quantum.core.ns, Num quantum.core.ns, ARegex quantum.core.ns, Regex quantum.core.ns, AExactNum quantum.core.ns, Key quantum.core.ns, AEditable quantum.core.ns, Map quantum.core.ns, ArrList quantum.core.ns, AKey quantum.core.ns, LSeq quantum.core.ns, fn-or quantum.core.logic, Set quantum.core.ns, splice-or quantum.core.logic, ExactNum quantum.core.ns, fn-and quantum.core.logic, fn* quantum.core.function, compr quantum.core.function, AQueue quantum.core.ns, AError quantum.core.ns, Queue quantum.core.ns, ADouble quantum.core.ns, TreeMap quantum.core.ns, AVec quantum.core.ns, ADecimal quantum.core.ns, Exception quantum.core.ns, Decimal quantum.core.ns, AInt quantum.core.ns, ATransient quantum.core.ns, Int quantum.core.ns, Transient quantum.core.ns, ANum quantum.core.ns, ANil quantum.core.ns, unary quantum.core.function}, :defs {error? {:name quantum.core.type/error?, :file "src/cljc/quantum/core/type.cljc", :line 87, :column 9, :end-line 87, :end-column 20, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/type.cljc", :line 87, :column 14, :end-line 87, :end-column 20}}, boolean? {:name quantum.core.type/boolean?, :file "src/cljc/quantum/core/type.cljc", :line 73, :column 1, :end-line 73, :end-column 14, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/type.cljc", :line 73, :column 6, :end-line 73, :end-column 14}}, double? {:name quantum.core.type/double?, :file "src/cljc/quantum/core/type.cljc", :line 69, :column 1, :end-line 69, :end-column 13, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/type.cljc", :line 69, :column 6, :end-line 69, :end-column 13}}, map-entry? {:name quantum.core.type/map-entry?, :file "src/cljc/quantum/core/type.cljc", :line 82, :column 9, :end-line 82, :end-column 24, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/type.cljc", :line 82, :column 14, :end-line 82, :end-column 24}}, transient? {:name quantum.core.type/transient?, :file "src/cljc/quantum/core/type.cljc", :line 85, :column 9, :end-line 85, :end-column 24, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/type.cljc", :line 85, :column 14, :end-line 85, :end-column 24}}, name-from-class {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/type.cljc", :line 50, :column 7, :end-line 50, :end-column 22, :arglists (quote ([class-0]))}, :name quantum.core.type/name-from-class, :variadic false, :file "src/cljc/quantum/core/type.cljc", :end-column 22, :method-params ([class-0]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([class-0]))}, editable? {:name quantum.core.type/editable?, :file "src/cljc/quantum/core/type.cljc", :line 84, :column 9, :end-line 84, :end-column 23, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/type.cljc", :line 84, :column 14, :end-line 84, :end-column 23}}, instance+? {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/type.cljc", :line 44, :column 12, :end-line 44, :end-column 22, :arglists (quote ([class-0 obj]))}, :name quantum.core.type/instance+?, :variadic false, :file "src/cljc/quantum/core/type.cljc", :end-column 22, :method-params ([class-0 obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 6, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([class-0 obj]))}, types {:name quantum.core.type/types, :file "src/cljc/quantum/core/type.cljc", :line 101, :column 1, :end-line 101, :end-column 11, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/type.cljc", :line 101, :column 6, :end-line 101, :end-column 11}}, class {:name quantum.core.type/class, :file "src/cljc/quantum/core/type.cljc", :line 40, :column 10, :end-line 40, :end-column 20, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/type.cljc", :line 40, :column 15, :end-line 40, :end-column 20}}, transient-threshold {:name quantum.core.type/transient-threshold, :file "src/cljc/quantum/core/type.cljc", :line 61, :column 1, :end-line 61, :end-column 25, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/type.cljc", :line 61, :column 6, :end-line 61, :end-column 25}}}, :require-macros {log quantum.core.logic, quantum.core.logic quantum.core.logic, fn quantum.core.function, quantum.core.function quantum.core.function}, :cljs.analyzer/constants {:seen #{:else :default}, :order [:else :default]}, :doc "Type-checking predicates, 'transientization' checks, class aliases, etc."}