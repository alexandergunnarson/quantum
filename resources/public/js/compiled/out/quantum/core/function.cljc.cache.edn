;; Analyzed by ClojureScript 0.0-3269
{:name quantum.core.function, :doc "Useful function-related functions (one could say 'metafunctions').\n\n          Higher-order functions, currying, monoids, reverse comp, arrow macros, inner partials, juxts, etc.", :excludes #{}, :use-macros nil, :require-macros nil, :uses {Editable quantum.core.ns, sorted-map+ quantum.core.data.map, Nil quantum.core.ns, Bool quantum.core.ns, IllegalArgumentException quantum.core.ns, Vec quantum.core.ns, Num quantum.core.ns, Regex quantum.core.ns, Key quantum.core.ns, Map quantum.core.ns, ArrList quantum.core.ns, LSeq quantum.core.ns, Set quantum.core.ns, ExactNum quantum.core.ns, Queue quantum.core.ns, TreeMap quantum.core.ns, Exception quantum.core.ns, Decimal quantum.core.ns, Int quantum.core.ns, Transient quantum.core.ns}, :requires {ns quantum.core.ns, quantum.core.ns quantum.core.ns, map quantum.core.data.map, quantum.core.data.map quantum.core.data.map, clojure.walk clojure.walk}, :imports nil, :defs {call-> {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 188, :column 7, :end-line 188, :end-column 13, :arglists (quote ([arg & [func & args]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(arg [func & args])], :arglists ([arg & [func & args]]), :arglists-meta (nil)}}, :name quantum.core.function/call->, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(arg [func & args])], :arglists ([arg & [func & args]]), :arglists-meta (nil)}, :method-params [(arg [func & args])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists ([arg & [func & args]])}, juxtm {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 237, :column 7, :end-line 237, :end-column 12, :arglists (quote ([& args])), :doc "Like /juxt/, but applies a hash-map instead of a vector.\n   Requires an even number of arguments.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name quantum.core.function/juxtm, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Like /juxt/, but applies a hash-map instead of a vector.\n   Requires an even number of arguments."}, firsta {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 63, :column 7, :end-line 63, :end-column 13, :arglists (quote ([x] [x y] [x y z] [x y z & more])), :doc "Accepts any number of arguments and returns the first.", :attribution "parkour.reducers", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([x] [x y] [x y z]), :arglists ([x] [x y] [x y z] [x y z & more]), :arglists-meta (nil nil nil nil)}}, :name quantum.core.function/firsta, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([x] [x y] [x y z]), :arglists ([x] [x y] [x y z] [x y z & more]), :arglists-meta (nil nil nil nil)}, :method-params ([x] [x y] [x y z]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 63, :attribution "parkour.reducers", :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists ([x] [x y] [x y z] [x y z & more]), :doc "Accepts any number of arguments and returns the first."}, *fn {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 155, :column 7, :end-line 155, :end-column 10, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name quantum.core.function/*fn, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, juxt-sm {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 242, :column 7, :end-line 242, :end-column 14, :arglists (quote ([& args])), :doc "Like /juxt/, but applies a sorted-map+ instead of a vector.\n   Requires an even number of arguments.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name quantum.core.function/juxt-sm, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Like /juxt/, but applies a sorted-map+ instead of a vector.\n   Requires an even number of arguments."}, with-msg {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 267, :column 7, :end-line 267, :end-column 15, :arglists (quote ([msg obj]))}, :name quantum.core.function/with-msg, :variadic false, :file "src/cljc/quantum/core/function.cljc", :end-column 15, :method-params ([msg obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 2, :fn-var true, :arglists (quote ([msg obj]))}, f*n {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 147, :column 7, :end-line 147, :end-column 10, :arglists (quote ([func & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(func args)], :arglists ([func & args]), :arglists-meta (nil)}}, :name quantum.core.function/f*n, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(func args)], :arglists ([func & args]), :arglists-meta (nil)}, :method-params [(func args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists ([func & args])}, fn-bi {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 157, :column 7, :end-line 157, :end-column 12, :arglists (quote ([arg]))}, :name quantum.core.function/fn-bi, :variadic false, :file "src/cljc/quantum/core/function.cljc", :end-column 12, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg]))}, seconda {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 71, :column 7, :end-line 71, :end-column 14, :arglists (quote ([x y] [x y z] [x y z & more])), :doc "Accepts any number of arguments and returns the second.", :attribution "parkour.reducers", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z] [x y z & more]), :arglists-meta (nil nil nil)}}, :name quantum.core.function/seconda, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z] [x y z & more]), :arglists-meta (nil nil nil)}, :method-params ([x y] [x y z]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 71, :attribution "parkour.reducers", :end-line 71, :max-fixed-arity 3, :fn-var true, :arglists ([x y] [x y z] [x y z & more]), :doc "Accepts any number of arguments and returns the second."}, call-f*n {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 187, :column 7, :end-line 187, :end-column 15, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name quantum.core.function/call-f*n, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, call-fn* {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 186, :column 7, :end-line 186, :end-column 15, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name quantum.core.function/call-fn*, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, do-rfn {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 273, :column 8, :end-line 273, :end-column 14, :private true, :arglists (quote ([f1 k fkv])), :attribution "clojure.core.reducers"}, :private true, :name quantum.core.function/do-rfn, :variadic false, :file "src/cljc/quantum/core/function.cljc", :end-column 14, :method-params ([f1 k fkv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 273, :attribution "clojure.core.reducers", :end-line 273, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f1 k fkv]))}, call {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 54, :column 7, :end-line 54, :end-column 11, :arglists (quote ([f] [f x] [f x y] [f x y z] [f x y z & more])), :doc "Call function `f` with additional arguments.", :attribution "Alex Gunnarson", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f] [f x] [f x y] [f x y z]), :arglists ([f] [f x] [f x y] [f x y z] [f x y z & more]), :arglists-meta (nil nil nil nil nil)}}, :name quantum.core.function/call, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f] [f x] [f x y] [f x y z]), :arglists ([f] [f x] [f x y] [f x y z] [f x y z & more]), :arglists-meta (nil nil nil nil nil)}, :method-params ([f] [f x] [f x y] [f x y z]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 54, :attribution "Alex Gunnarson", :end-line 54, :max-fixed-arity 4, :fn-var true, :arglists ([f] [f x] [f x y] [f x y z] [f x y z & more]), :doc "Call function `f` with additional arguments."}, call->> {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 189, :column 7, :end-line 189, :end-column 14, :arglists (quote ([& [func & args]])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [([func & args])], :arglists ([& [func & args]]), :arglists-meta (nil)}}, :name quantum.core.function/call->>, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [([func & args])], :arglists ([& [func & args]]), :arglists-meta (nil)}, :method-params [([func & args])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 0, :fn-var true, :arglists ([& [func & args]])}, zeroid {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 116, :column 7, :end-line 116, :end-column 13, :arglists (quote ([func base])), :attribution "Alex Gunnarson"}, :name quantum.core.function/zeroid, :variadic false, :file "src/cljc/quantum/core/function.cljc", :end-column 13, :method-params ([func base]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :attribution "Alex Gunnarson", :end-line 116, :max-fixed-arity 2, :fn-var true, :arglists (quote ([func base]))}, with-pr {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 264, :column 7, :end-line 264, :end-column 14, :arglists (quote ([obj]))}, :name quantum.core.function/with-pr, :variadic false, :file "src/cljc/quantum/core/function.cljc", :end-column 14, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, juxtm* {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 219, :column 7, :end-line 219, :end-column 13, :arglists (quote ([map-type args]))}, :name quantum.core.function/juxtm*, :variadic false, :file "src/cljc/quantum/core/function.cljc", :end-column 13, :method-params ([map-type args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map-type args]))}, do-curried {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 100, :column 8, :end-line 100, :end-column 18, :private true, :arglists (quote ([name doc meta args body])), :attribution "clojure.core.reducers"}, :private true, :name quantum.core.function/do-curried, :variadic false, :file "src/cljc/quantum/core/function.cljc", :end-column 18, :method-params ([name doc meta args body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :attribution "clojure.core.reducers", :end-line 100, :max-fixed-arity 5, :fn-var true, :arglists (quote ([name doc meta args body]))}, fn* {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 139, :column 7, :end-line 139, :end-column 10, :arglists (quote ([& args])), :doc "FOR SOME REASON '(fn* + 3)' [and the like] FAILS WITH THE FOLLOWING EXCEPTION:\n  'CompilerException java.lang.ClassCastException: java.lang.Long cannot be cast to clojure.lang.ISeq'\n\n   Likewise, simply copying and pasting the code for |partial| from clojure.core doesn't work either...", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name quantum.core.function/fn*, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "FOR SOME REASON '(fn* + 3)' [and the like] FAILS WITH THE FOLLOWING EXCEPTION:\n  'CompilerException java.lang.ClassCastException: java.lang.Long cannot be cast to clojure.lang.ISeq'\n\n   Likewise, simply copying and pasting the code for |partial| from clojure.core doesn't work either..."}, compr {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 134, :column 7, :end-line 134, :end-column 12, :arglists (quote ([& args])), :todo ["Make more efficient by not using |reverse|."], :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name quantum.core.function/compr, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 134, :todo ["Make more efficient by not using |reverse|."], :end-line 134, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, with {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 268, :column 7, :end-line 268, :end-column 11, :arglists (quote ([expr obj]))}, :name quantum.core.function/with, :variadic false, :file "src/cljc/quantum/core/function.cljc", :end-column 11, :method-params ([expr obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 2, :fn-var true, :arglists (quote ([expr obj]))}, monoid {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 124, :column 7, :end-line 124, :end-column 13, :arglists (quote ([op ctor])), :doc "Builds a combining fn out of the supplied operator and identity\n  constructor. op must be associative and ctor called with no args\n  must return an identity value for it.", :attribution "clojure.core.reducers"}, :name quantum.core.function/monoid, :variadic false, :file "src/cljc/quantum/core/function.cljc", :end-column 13, :method-params ([op ctor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :attribution "clojure.core.reducers", :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists (quote ([op ctor])), :doc "Builds a combining fn out of the supplied operator and identity\n  constructor. op must be associative and ctor called with no args\n  must return an identity value for it."}, withf {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 269, :column 7, :end-line 269, :end-column 12, :arglists (quote ([func obj]))}, :name quantum.core.function/withf, :variadic false, :file "src/cljc/quantum/core/function.cljc", :end-column 12, :method-params ([func obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 2, :fn-var true, :arglists (quote ([func obj]))}, f**n {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 151, :column 7, :end-line 151, :end-column 11, :arglists (quote ([func & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(func args)], :arglists ([func & args]), :arglists-meta (nil)}}, :name quantum.core.function/f**n, :variadic true, :file "src/cljc/quantum/core/function.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(func args)], :arglists ([func & args]), :arglists-meta (nil)}, :method-params [(func args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists ([func & args])}, unary {:protocol-inline nil, :meta {:file "/Users/alexandergunnarson/Development/Source Code Projects/quantum/src/cljc/quantum/core/function.cljc", :line 159, :column 7, :end-line 159, :end-column 12, :arglists (quote ([pred]))}, :name quantum.core.function/unary, :variadic false, :file "src/cljc/quantum/core/function.cljc", :end-column 12, :method-params ([pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pred]))}}}