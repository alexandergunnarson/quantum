nil (do (set! *warn-on-reflection* nil) (require (quote cljsbuild.compiler) (quote cljsbuild.crossover) (quote cljsbuild.util)) (try (do (clojure.core/letfn [(copy-crossovers__3029__auto__ [] (cljsbuild.crossover/copy-crossovers "/Users/alexandergunnarson/Development/Source Code Projects/quantum/target/cljsbuild-crossover" (quote [])))] (copy-crossovers__3029__auto__) (clojure.core/when true (cljsbuild.util/once-every-bg 1000 "copying crossovers" copy-crossovers__3029__auto__)) (clojure.core/let [crossover-macro-paths__3030__auto__ (cljsbuild.crossover/crossover-macro-paths (quote [])) builds__3031__auto__ (clojure.core/for [opts__3032__auto__ (quote ({:source-paths ["test/cljs" "src/cljc"], :jar false, :notify-command nil, :incremental true, :assert true, :compiler {:output-dir "dev-resources/public/js/compiled/out", :externs ["closure-js/externs"], :cache-analysis true, :optimizations :none, :parallel-build true, :output-to "dev-resources/public/js/compiled/quantum.js", :source-map-timestamp true, :asset-path "js/compiled/out", :source-map true, :libs ["closure-js/libs"], :main quantum.cljstest}, :id "dev", :figwheel true, :parsed-notify-command {:shell ()}} {:source-paths ["src/cljs" "src/cljc"], :jar false, :notify-command nil, :incremental true, :assert true, :compiler {:output-to "dev-resources/public/js/min-compiled/quantum.js", :externs ["closure-js/externs"], :libs ["closure-js/libs"], :output-dir "dev-resources/public/js/min-compiled/out", :main quantum.cljstest, :optimizations :advanced, :asset-path "js/min-compiled/out", :pretty-print false, :parallel-build true}, :id "min", :parsed-notify-command {:shell ()}}))] [opts__3032__auto__ (cljs.env/default-compiler-env (:compiler opts__3032__auto__))])] (clojure.core/doseq [[build__3033__auto__ compiler-env__3034__auto__] builds__3031__auto__] (clojure.core/doseq [handler__3035__auto__ (:warning-handlers build__3033__auto__)] (clojure.core/when (clojure.core/symbol? handler__3035__auto__) (clojure.core/let [[n__3036__auto__ sym__3037__auto__] (clojure.string/split (clojure.core/str handler__3035__auto__) #"/")] (clojure.core/assert (clojure.core/and n__3036__auto__ sym__3037__auto__) (clojure.core/str "Symbols for :warning-handlers must be fully-qualified, " (clojure.core/pr-str handler__3035__auto__) " is missing namespace.")) (clojure.core/when (clojure.core/and n__3036__auto__ sym__3037__auto__) (clojure.core/require (clojure.core/symbol n__3036__auto__))))))) (clojure.core/loop [dependency-mtimes__3038__auto__ (clojure.core/repeat (clojure.core/count builds__3031__auto__) {})] (clojure.core/let [builds-mtimes__3039__auto__ (clojure.core/map clojure.core/vector builds__3031__auto__ dependency-mtimes__3038__auto__) new-dependency-mtimes__3040__auto__ (clojure.core/doall (clojure.core/for [[[build__3033__auto__ compiler-env__3034__auto__] mtimes__3041__auto__] builds-mtimes__3039__auto__] (cljs.analyzer/with-warning-handlers (clojure.core/if-let [handlers__3042__auto__ (:warning-handlers build__3033__auto__)] (clojure.core/mapv (clojure.core/fn [handler__3035__auto__] (if (clojure.core/symbol? handler__3035__auto__) (clojure.core/resolve handler__3035__auto__) handler__3035__auto__)) (clojure.core/eval handlers__3042__auto__)) cljs.analyzer/*cljs-warning-handlers*) (clojure.core/binding [cljs.env/*compiler* compiler-env__3034__auto__] (cljsbuild.compiler/run-compiler (:source-paths build__3033__auto__) (quote []) "/Users/alexandergunnarson/Development/Source Code Projects/quantum/target/cljsbuild-crossover" crossover-macro-paths__3030__auto__ (:compiler build__3033__auto__) (:parsed-notify-command build__3033__auto__) (:incremental build__3033__auto__) (:assert build__3033__auto__) mtimes__3041__auto__ true)))))] (clojure.core/when true (java.lang.Thread/sleep 100) (recur new-dependency-mtimes__3040__auto__))))))) (java.lang.System/exit 0) (catch cljsbuild.test.TestsFailedException e__2976__auto__ (java.lang.System/exit 1)) (catch java.lang.Exception e__2976__auto__ (do (.printStackTrace e__2976__auto__) (java.lang.System/exit 1)))))