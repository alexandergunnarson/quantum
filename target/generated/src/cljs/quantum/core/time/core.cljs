(ns quantum.core.time.core
  (:refer-clojure :exclude [extend second])
  (:require
    [quantum.core.ns :as ns                              ]
                                    
           [cljs-time.core :as time]
                                            
           [cljs-time.periodic :as periodic]
    [quantum.core.reducers :as red :refer
                                                                                  
                                                                             
             [map+ reduce+ filter+ remove+ take+ take-while+
              count* reducei+ reducem+ fold+ foldm+ foldp+ range+ drop+]
             :refer-macros
             [for+]])
                                                   
                    )

; joda-time via clj-time
                               

     
                   
                                                                                                          
     
                                 
                                                                                                         

(defn ymd [date]
  (vector
    (time/year  date)
    (time/month date)
    (time/day   date)))
(defn beg-of-day
  ([date]
    (apply beg-of-day (ymd date)))
  (                                
          [y m d]
    (time/date-time y m d 0 0 0 0)))
(defn end-of-day
  ([date]
    (apply end-of-day (ymd date)))
  ([^long y ^long m ^long d]
    (time/date-time y m d 23 59 59 999)))
(defn whole-day
  ([date]
    (apply whole-day (ymd date)))
  ([^long y ^long m ^long d]
    (time/interval (beg-of-day y m d) (end-of-day y m d))))
(defn on?
  "Determines if date is on day.
   Inclusive of intervals."
  ([date on-date]
    (apply on? date (ymd on-date)))
  ([date y m d]
    (time/within? (whole-day y m d)   date)))

     
                                   
                                                
       
                                                           
     
                                           
                                                       
            
                                                      
                    
                      


(defn ^Delay for-days-between
  [date-a date-b f]
  (let [difference-in-days
          (time/in-days (time/interval date-a date-b))
        instants-on-beg-of-days
          (periodic/periodic-seq
            date-a (time/days 1))]
  (for+ [day (take (inc difference-in-days) instants-on-beg-of-days)]
    (f day))))

     
                       
                                     
;;;;;;;;;;;; This file autogenerated from src/cljx/quantum/core/time/core.cljx
