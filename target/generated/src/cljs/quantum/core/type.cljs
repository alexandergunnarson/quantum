(ns quantum.core.type
  (:require
    [quantum.core.ns :as ns :refer
                               
             [Exception IllegalArgumentException
              Nil Bool Num ExactNum Int Decimal Key Vec Set
              ArrList TreeMap LSeq Regex Editable Transient Queue Map]]
    [quantum.core.logic :as log :refer
                                                                                                
             [splice-or fn-and fn-or fn-not]
             :refer-macros
             [ifn if*n whenc whenf whenf*n whencf*n condf condf*n]]
    [quantum.core.function :as fn :refer
                                                    
             [compr f*n fn* unary]
             :refer-macros
             [fn->> fn-> <-]])
       
          
                    
                                               
                                                                     
                     
                    )

                                      

; TODOS
; Should include typecasting (/cast/)

       (def class type)

(defn instance+? [class-0 obj]
  (try
    (instance? class-0 obj)
          
    (catch js/TypeError _
      (try (satisfies? class-0 obj)))))

; NUMBERS
(def  double?                                      
                        (fn-and
                          number?
                          (fn-> str (.indexOf ".") (not= -1)))) ; has decimal point
(def boolean? 
                                    
         (fn-or true? false?))

                                                                

; ARRAYS
                                                  
                                                  
                                                  
                                                  
                                                    
                                                        
                                                   
                                                   
                                                   

                                                     ; getClass() shouldn't really be a slow call
                                                        

; TODO add this in cljs
                                                                    

(def array-list?  (f*n splice-or #(instance+? %2 %1)
                      ArrList
                                                       ))
(def map-entry?                                                    
                          (fn-and vector? (fn-> count (= 2))))

(def sorted-map?  (partial instance+? TreeMap))
(def queue?       (partial instance+? Queue))
(def lseq?        (partial instance+? LSeq))
(def coll+?       (fn-or coll? array-list?))
(def pattern?     (partial instance+? Regex))
(def regex?       pattern?)
(def editable?    (partial instance+? Editable))
(def transient?   (partial instance+? Transient))
                                                               
(def error?                               (partial instance+? js/Error))

(defn name-from-class
  [class-0]
  (let [^String class-str (str class-0)]
    (-> class-str
        (subs (-> class-str (.indexOf " ") inc))
        symbol)))



;;;;;;;;;;;; This file autogenerated from src/cljx/quantum/core/type.cljx
