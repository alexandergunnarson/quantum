(ns quantum.test.core.reducers.fold
  (:require [quantum.core.reducers.fold :as ns]))

;___________________________________________________________________________________________________________________________________
;=================================================={           FOLD           }=====================================================
;=================================================={           into           }=====================================================

(defn test:folder? [x])

(defn test:transformer? [x])

(defn test:folder->coll
  [coll-0])

(defn test:->chunk-size [x])

;___________________________________________________________________________________________________________________________________
;=================================================={           FOLD           }=====================================================
;=================================================={         (PREDUCE)        }=====================================================
(defn test:fold
  ([             reduce-fn coll])
  ([  combine-fn reduce-fn coll])
  ([n combine-fn reduce-fn coll]))

(defn test:pjoinl-fold
  [to from])
 
(defn test:pjoinl
  ([])
  ([to])
  ([to from])
  ([to from & froms]))